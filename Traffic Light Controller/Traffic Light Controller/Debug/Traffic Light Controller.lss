
Traffic Light Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a76  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a76  00000aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b1c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014b0  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085b  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b44  00000000  00000000  0000298b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  000034d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050d  00000000  00000000  000036f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000723  00000000  00000000  00003c05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 05 02 	call	0x40a	; 0x40a <main>
  7a:	0c 94 39 05 	jmp	0xa72	; 0xa72 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <appInit>:
#include "../Utilities/Interrupts.h"
#include "../EUCAL/LED driver/LED.h"

void appInit(){
//initializing LEDs
LED_init(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	81 e4       	ldi	r24, 0x41	; 65
  86:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LED_init>
LED_init(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	81 e4       	ldi	r24, 0x41	; 65
  8e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LED_init>
LED_init(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LED_init>

LED_init(LED_PED_PORT,LED_PED_PORT_R_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LED_init>
LED_init(LED_PED_PORT,LED_PED_PORT_Y_PIN);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LED_init>
LED_init(LED_PED_PORT,LED_PED_PORT_G_PIN);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LED_init>

//initialize timer to normal mode
TIMER_init();
  b2:	0e 94 00 03 	call	0x600	; 0x600 <TIMER_init>

//initialize button
BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	84 e4       	ldi	r24, 0x44	; 68
  ba:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <BUTTON_init>
DIO_init(PORT_D,PIN0,OUT);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	84 e4       	ldi	r24, 0x44	; 68
  c4:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_init>
  c8:	08 95       	ret

000000ca <blinkYellow>:
}

EN_carColor_t carColor = GREEN;
void blinkYellow()
{
  ca:	cf 93       	push	r28
	for (uint8_t i = 0; i < 5;i++)
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	19 c0       	rjmp	.+50     	; 0x102 <blinkYellow+0x38>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	81 e4       	ldi	r24, 0x41	; 65
  d4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
		LED_on(LED_PED_PORT,LED_PED_PORT_Y_PIN);
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	82 e4       	ldi	r24, 0x42	; 66
  dc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
		TIMER_delay(500);
  e0:	84 ef       	ldi	r24, 0xF4	; 244
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	81 e4       	ldi	r24, 0x41	; 65
  ec:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
  f0:	61 e0       	ldi	r22, 0x01	; 1
  f2:	82 e4       	ldi	r24, 0x42	; 66
  f4:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
		TIMER_delay(500);
  f8:	84 ef       	ldi	r24, 0xF4	; 244
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
}

EN_carColor_t carColor = GREEN;
void blinkYellow()
{
	for (uint8_t i = 0; i < 5;i++)
 100:	cf 5f       	subi	r28, 0xFF	; 255
 102:	c5 30       	cpi	r28, 0x05	; 5
 104:	28 f3       	brcs	.-54     	; 0xd0 <blinkYellow+0x6>
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
		TIMER_delay(500);
	}
}
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <normalMode>:

void normalMode()
{
 10a:	cf 93       	push	r28
	DIO_write(PORT_D,PIN0,HI);
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	84 e4       	ldi	r24, 0x44	; 68
 112:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_write>
	//turn all LEDs off to clear whatever was done in pedestrian mode (if coming from there)
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	81 e4       	ldi	r24, 0x41	; 65
 11a:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	81 e4       	ldi	r24, 0x41	; 65
 122:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	
	LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN);
 12e:	62 e0       	ldi	r22, 0x02	; 2
 130:	82 e4       	ldi	r24, 0x42	; 66
 132:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	82 e4       	ldi	r24, 0x42	; 66
 13a:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN);
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	82 e4       	ldi	r24, 0x42	; 66
 142:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	
	
	//1.car green on & pedestrian red on for 5 seconds
	LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
	LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN);
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	82 e4       	ldi	r24, 0x42	; 66
 152:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
	carColor = GREEN;	
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TIMER_delay(5000); //delay 5 seconds
 15c:	88 e8       	ldi	r24, 0x88	; 136
 15e:	93 e1       	ldi	r25, 0x13	; 19
 160:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn green led off while pedestrian red still on
 164:	62 e0       	ldi	r22, 0x02	; 2
 166:	81 e4       	ldi	r24, 0x41	; 65
 168:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	
	//car yellow light to blink for 5 seconds	
	carColor = YELLOW;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	for (uint8_t i = 0; i < 5;i++)
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	11 c0       	rjmp	.+34     	; 0x198 <normalMode+0x8e>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	81 e4       	ldi	r24, 0x41	; 65
 17a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
		TIMER_delay(500);
 17e:	84 ef       	ldi	r24, 0xF4	; 244
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
		TIMER_delay(500);
 18e:	84 ef       	ldi	r24, 0xF4	; 244
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
	TIMER_delay(5000); //delay 5 seconds
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn green led off while pedestrian red still on
	
	//car yellow light to blink for 5 seconds	
	carColor = YELLOW;
	for (uint8_t i = 0; i < 5;i++)
 196:	cf 5f       	subi	r28, 0xFF	; 255
 198:	c5 30       	cpi	r28, 0x05	; 5
 19a:	68 f3       	brcs	.-38     	; 0x176 <normalMode+0x6c>
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		TIMER_delay(500);
	}
	
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN); //turning off the car yellow light  -- pedestrian red still on
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	
	//card red on, pedestrian red off, pedestrian green on
	carColor = RED;
 1a4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	81 e4       	ldi	r24, 0x41	; 65
 1ac:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
	LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	82 e4       	ldi	r24, 0x42	; 66
 1b4:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN);
 1b8:	62 e0       	ldi	r22, 0x02	; 2
 1ba:	82 e4       	ldi	r24, 0x42	; 66
 1bc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
	TIMER_delay(5000);
 1c0:	88 e8       	ldi	r24, 0x88	; 136
 1c2:	93 e1       	ldi	r25, 0x13	; 19
 1c4:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //turn car red off
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN); //turn ped green off
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	82 e4       	ldi	r24, 0x42	; 66
 1d4:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
	LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //turn ped red on
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	82 e4       	ldi	r24, 0x42	; 66
 1dc:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
	
	
	//start blinking car yellow light
	carColor = YELLOW;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	for (uint8_t i = 0; i < 5;i++)
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	11 c0       	rjmp	.+34     	; 0x20c <normalMode+0x102>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	81 e4       	ldi	r24, 0x41	; 65
 1ee:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
		TIMER_delay(500);
 1f2:	84 ef       	ldi	r24, 0xF4	; 244
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
		TIMER_delay(500);
 202:	84 ef       	ldi	r24, 0xF4	; 244
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
	
	
	//start blinking car yellow light
	carColor = YELLOW;
	
	for (uint8_t i = 0; i < 5;i++)
 20a:	cf 5f       	subi	r28, 0xFF	; 255
 20c:	c5 30       	cpi	r28, 0x05	; 5
 20e:	68 f3       	brcs	.-38     	; 0x1ea <normalMode+0xe0>
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		TIMER_delay(500);
	}
	
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>

}
 218:	cf 91       	pop	r28
 21a:	08 95       	ret

0000021c <pedestrianMode>:



void pedestrianMode()
{
 21c:	cf 93       	push	r28
	switch(carColor)
 21e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 222:	81 30       	cpi	r24, 0x01	; 1
 224:	09 f4       	brne	.+2      	; 0x228 <pedestrianMode+0xc>
 226:	45 c0       	rjmp	.+138    	; 0x2b2 <pedestrianMode+0x96>
 228:	20 f0       	brcs	.+8      	; 0x232 <pedestrianMode+0x16>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	09 f4       	brne	.+2      	; 0x230 <pedestrianMode+0x14>
 22e:	83 c0       	rjmp	.+262    	; 0x336 <pedestrianMode+0x11a>
 230:	ae c0       	rjmp	.+348    	; 0x38e <pedestrianMode+0x172>
	{		
		
		
		case RED :
			//car red on and ped green on for 5 seconds
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN);		
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	82 e4       	ldi	r24, 0x42	; 66
 23e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			TIMER_delay(5000);	
 242:	88 e8       	ldi	r24, 0x88	; 136
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
				continue as if in normal mode to complete the cycle since the ISR returns to the
				place it came from.
			*/
			
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			//while green still on for pedestrians
			for (uint8_t i = 0; i < 5;i++)
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	11 c0       	rjmp	.+34     	; 0x278 <pedestrianMode+0x5c>
			{
				LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	81 e4       	ldi	r24, 0x41	; 65
 25a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
				TIMER_delay(500);
 25e:	84 ef       	ldi	r24, 0xF4	; 244
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
				LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	81 e4       	ldi	r24, 0x41	; 65
 26a:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
				TIMER_delay(500);
 26e:	84 ef       	ldi	r24, 0xF4	; 244
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
			*/
			
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
			//while green still on for pedestrians
			for (uint8_t i = 0; i < 5;i++)
 276:	cf 5f       	subi	r28, 0xFF	; 255
 278:	c5 30       	cpi	r28, 0x05	; 5
 27a:	68 f3       	brcs	.-38     	; 0x256 <pedestrianMode+0x3a>
				LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
				TIMER_delay(500);
			} 
			
			//turn off ped green and turn on ped red and car green
			LED_off(LED_PED_PORT,LED_CAR_PORT_G_PIN);
 27c:	62 e0       	ldi	r22, 0x02	; 2
 27e:	82 e4       	ldi	r24, 0x42	; 66
 280:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			LED_on(LED_PED_PORT,LED_CAR_PORT_R_PIN);//ped red on
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	82 e4       	ldi	r24, 0x42	; 66
 288:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green	
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	81 e4       	ldi	r24, 0x41	; 65
 290:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			TIMER_delay(5000);
 294:	88 e8       	ldi	r24, 0x88	; 136
 296:	93 e1       	ldi	r25, 0x13	; 19
 298:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn off car green 
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	81 e4       	ldi	r24, 0x41	; 65
 2a0:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			blinkYellow(); //blink both yellow
 2a4:	0e 94 65 00 	call	0xca	; 0xca <blinkYellow>
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);//turn on car red and back to normal mode
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			//LED_off(LED_PED_PORT,LED_CAR_PORT_R_PIN);
			
			
			break;
 2b0:	6e c0       	rjmp	.+220    	; 0x38e <pedestrianMode+0x172>
		
		case YELLOW:
			//1.both yellow blink for 5 seconds
			blinkYellow();
 2b2:	0e 94 65 00 	call	0xca	; 0xca <blinkYellow>
		
		
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //car red on
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green on	
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	82 e4       	ldi	r24, 0x42	; 66
 2c2:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN);	
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	82 e4       	ldi	r24, 0x42	; 66
 2ca:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			TIMER_delay(5000);
 2ce:	88 e8       	ldi	r24, 0x88	; 136
 2d0:	93 e1       	ldi	r25, 0x13	; 19
 2d2:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 e4       	ldi	r24, 0x41	; 65
 2da:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			blinkYellow();
 2de:	0e 94 65 00 	call	0xca	; 0xca <blinkYellow>
		
			LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green off
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green on
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red on
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	82 e4       	ldi	r24, 0x42	; 66
 2f6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			TIMER_delay(5000);
 2fa:	88 e8       	ldi	r24, 0x88	; 136
 2fc:	93 e1       	ldi	r25, 0x13	; 19
 2fe:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			
			for (uint8_t i = 0; i < 5;i++)
 30a:	c0 e0       	ldi	r28, 0x00	; 0
 30c:	11 c0       	rjmp	.+34     	; 0x330 <pedestrianMode+0x114>
			{
				LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	81 e4       	ldi	r24, 0x41	; 65
 312:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
				TIMER_delay(500);
 316:	84 ef       	ldi	r24, 0xF4	; 244
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
				LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	81 e4       	ldi	r24, 0x41	; 65
 322:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
				TIMER_delay(500);
 326:	84 ef       	ldi	r24, 0xF4	; 244
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
			LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red on
			TIMER_delay(5000);
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
			
			for (uint8_t i = 0; i < 5;i++)
 32e:	cf 5f       	subi	r28, 0xFF	; 255
 330:	c5 30       	cpi	r28, 0x05	; 5
 332:	68 f3       	brcs	.-38     	; 0x30e <pedestrianMode+0xf2>
 334:	2c c0       	rjmp	.+88     	; 0x38e <pedestrianMode+0x172>
			}
			
			break;
			
		case GREEN:
			blinkYellow();
 336:	0e 94 65 00 	call	0xca	; 0xca <blinkYellow>
			
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //car red on
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	81 e4       	ldi	r24, 0x41	; 65
 33e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green off
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	81 e4       	ldi	r24, 0x41	; 65
 346:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			
			LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green on
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	82 e4       	ldi	r24, 0x42	; 66
 34e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red off
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	82 e4       	ldi	r24, 0x42	; 66
 356:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			TIMER_delay(5000);
 35a:	88 e8       	ldi	r24, 0x88	; 136
 35c:	93 e1       	ldi	r25, 0x13	; 19
 35e:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	81 e4       	ldi	r24, 0x41	; 65
 366:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			blinkYellow();
 36a:	0e 94 65 00 	call	0xca	; 0xca <blinkYellow>
			
			LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green off
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	82 e4       	ldi	r24, 0x42	; 66
 372:	0e 94 01 02 	call	0x402	; 0x402 <LED_off>
			LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red on
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	82 e4       	ldi	r24, 0x42	; 66
 37a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			
			LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green on
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	81 e4       	ldi	r24, 0x41	; 65
 382:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED_on>
			
			TIMER_delay(5000);
 386:	88 e8       	ldi	r24, 0x88	; 136
 388:	93 e1       	ldi	r25, 0x13	; 19
 38a:	0e 94 08 03 	call	0x610	; 0x610 <TIMER_delay>
			break;
		
	}
	
	
}
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <appStart>:

void appStart()
{	
	while(1)
	{
		normalMode();			
 392:	0e 94 85 00 	call	0x10a	; 0x10a <normalMode>
 396:	fd cf       	rjmp	.-6      	; 0x392 <appStart>

00000398 <__vector_1>:
	}
	
}


ISR(EXT_INT_0){
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	2f 93       	push	r18
 3a4:	3f 93       	push	r19
 3a6:	4f 93       	push	r20
 3a8:	5f 93       	push	r21
 3aa:	6f 93       	push	r22
 3ac:	7f 93       	push	r23
 3ae:	8f 93       	push	r24
 3b0:	9f 93       	push	r25
 3b2:	af 93       	push	r26
 3b4:	bf 93       	push	r27
 3b6:	ef 93       	push	r30
 3b8:	ff 93       	push	r31
	//cli();
	pedestrianMode();
 3ba:	0e 94 0e 01 	call	0x21c	; 0x21c <pedestrianMode>
	//sei();		
	
 3be:	ff 91       	pop	r31
 3c0:	ef 91       	pop	r30
 3c2:	bf 91       	pop	r27
 3c4:	af 91       	pop	r26
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	7f 91       	pop	r23
 3cc:	6f 91       	pop	r22
 3ce:	5f 91       	pop	r21
 3d0:	4f 91       	pop	r20
 3d2:	3f 91       	pop	r19
 3d4:	2f 91       	pop	r18
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <BUTTON_init>:
#include "Button.h"


void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
		DIO_init(BUTTON_PORT,BUTTON_PIN,IN);
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	84 e4       	ldi	r24, 0x44	; 68
 3e6:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_init>
		GICR |= (1<<6); //enabling external interrupt 0
 3ea:	8b b7       	in	r24, 0x3b	; 59
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	8b bf       	out	0x3b, r24	; 59
 3f0:	08 95       	ret

000003f2 <LED_init>:
#include "LED.h"


void LED_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUT);	
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	0e 94 0c 02 	call	0x418	; 0x418 <DIO_init>
 3f8:	08 95       	ret

000003fa <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,HI);
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_write>
 400:	08 95       	ret

00000402 <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LO);
 402:	40 e0       	ldi	r20, 0x00	; 0
 404:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_write>
 408:	08 95       	ret

0000040a <main>:
#include "Application/Application.h"

int main(void)
{

	appInit();
 40a:	0e 94 41 00 	call	0x82	; 0x82 <appInit>
	
	appStart();
 40e:	0e 94 c9 01 	call	0x392	; 0x392 <appStart>
	
}
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	08 95       	ret

00000418 <DIO_init>:
#include "DIO.h"


void DIO_init(uint8_t portName, uint8_t pinNumber,uint8_t direction) //sets the wanted pin on the atmega 32 as either input or output by modifying the registers
{
	switch (portName){
 418:	82 34       	cpi	r24, 0x42	; 66
 41a:	31 f1       	breq	.+76     	; 0x468 <DIO_init+0x50>
 41c:	18 f4       	brcc	.+6      	; 0x424 <DIO_init+0xc>
 41e:	81 34       	cpi	r24, 0x41	; 65
 420:	39 f0       	breq	.+14     	; 0x430 <DIO_init+0x18>
 422:	08 95       	ret
 424:	83 34       	cpi	r24, 0x43	; 67
 426:	e1 f1       	breq	.+120    	; 0x4a0 <DIO_init+0x88>
 428:	84 34       	cpi	r24, 0x44	; 68
 42a:	09 f4       	brne	.+2      	; 0x42e <DIO_init+0x16>
 42c:	54 c0       	rjmp	.+168    	; 0x4d6 <DIO_init+0xbe>
 42e:	08 95       	ret
		case PORT_A:
			if (direction == IN)
 430:	41 11       	cpse	r20, r1
 432:	0c c0       	rjmp	.+24     	; 0x44c <DIO_init+0x34>
			{
				DDRA &= ~(1<<pinNumber);
 434:	2a b3       	in	r18, 0x1a	; 26
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_init+0x28>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_init+0x24>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	8a bb       	out	0x1a, r24	; 26
 44a:	08 95       	ret
			}
			else if (direction == OUT) 
 44c:	41 30       	cpi	r20, 0x01	; 1
 44e:	09 f0       	breq	.+2      	; 0x452 <DIO_init+0x3a>
 450:	5c c0       	rjmp	.+184    	; 0x50a <DIO_init+0xf2>
			{
				DDRA |= (1<<pinNumber);
 452:	2a b3       	in	r18, 0x1a	; 26
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_init+0x46>
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_init+0x42>
 462:	82 2b       	or	r24, r18
 464:	8a bb       	out	0x1a, r24	; 26
 466:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_B:
			if (direction == IN)
 468:	41 11       	cpse	r20, r1
 46a:	0c c0       	rjmp	.+24     	; 0x484 <DIO_init+0x6c>
			{
				DDRB &= ~(1<<pinNumber);
 46c:	27 b3       	in	r18, 0x17	; 23
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_init+0x60>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	6a 95       	dec	r22
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_init+0x5c>
 47c:	80 95       	com	r24
 47e:	82 23       	and	r24, r18
 480:	87 bb       	out	0x17, r24	; 23
 482:	08 95       	ret
			}
			else if (direction == OUT)
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	09 f0       	breq	.+2      	; 0x48a <DIO_init+0x72>
 488:	40 c0       	rjmp	.+128    	; 0x50a <DIO_init+0xf2>
			{
				DDRB |= (1<<pinNumber);
 48a:	27 b3       	in	r18, 0x17	; 23
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_init+0x7e>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_init+0x7a>
 49a:	82 2b       	or	r24, r18
 49c:	87 bb       	out	0x17, r24	; 23
 49e:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_C:
			if (direction == IN)
 4a0:	41 11       	cpse	r20, r1
 4a2:	0c c0       	rjmp	.+24     	; 0x4bc <DIO_init+0xa4>
			{
				DDRC &= ~(1<<pinNumber);
 4a4:	24 b3       	in	r18, 0x14	; 20
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <DIO_init+0x98>
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <DIO_init+0x94>
 4b4:	80 95       	com	r24
 4b6:	82 23       	and	r24, r18
 4b8:	84 bb       	out	0x14, r24	; 20
 4ba:	08 95       	ret
			}
			else if (direction == OUT)
 4bc:	41 30       	cpi	r20, 0x01	; 1
 4be:	29 f5       	brne	.+74     	; 0x50a <DIO_init+0xf2>
			{
				DDRC |= (1<<pinNumber);
 4c0:	24 b3       	in	r18, 0x14	; 20
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_init+0xb4>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_init+0xb0>
 4d0:	82 2b       	or	r24, r18
 4d2:	84 bb       	out	0x14, r24	; 20
 4d4:	08 95       	ret
				//error handling
			}
			break;
		
		case PORT_D:
			if (direction == IN)
 4d6:	41 11       	cpse	r20, r1
 4d8:	0c c0       	rjmp	.+24     	; 0x4f2 <DIO_init+0xda>
			{
				DDRD &= ~(1<<pinNumber);
 4da:	21 b3       	in	r18, 0x11	; 17
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_init+0xce>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_init+0xca>
 4ea:	80 95       	com	r24
 4ec:	82 23       	and	r24, r18
 4ee:	81 bb       	out	0x11, r24	; 17
 4f0:	08 95       	ret
			}
			else if (direction == OUT)
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	51 f4       	brne	.+20     	; 0x50a <DIO_init+0xf2>
			{
				DDRD |= (1<<pinNumber);
 4f6:	21 b3       	in	r18, 0x11	; 17
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_init+0xea>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_init+0xe6>
 506:	82 2b       	or	r24, r18
 508:	81 bb       	out	0x11, r24	; 17
 50a:	08 95       	ret

0000050c <DIO_write>:
			
}

void DIO_write(uint8_t portName, uint8_t pinNumber,uint8_t value)
{
	switch (portName)
 50c:	82 34       	cpi	r24, 0x42	; 66
 50e:	31 f1       	breq	.+76     	; 0x55c <DIO_write+0x50>
 510:	18 f4       	brcc	.+6      	; 0x518 <DIO_write+0xc>
 512:	81 34       	cpi	r24, 0x41	; 65
 514:	39 f0       	breq	.+14     	; 0x524 <DIO_write+0x18>
 516:	08 95       	ret
 518:	83 34       	cpi	r24, 0x43	; 67
 51a:	e1 f1       	breq	.+120    	; 0x594 <DIO_write+0x88>
 51c:	84 34       	cpi	r24, 0x44	; 68
 51e:	09 f4       	brne	.+2      	; 0x522 <DIO_write+0x16>
 520:	54 c0       	rjmp	.+168    	; 0x5ca <DIO_write+0xbe>
 522:	08 95       	ret
	{
		case PORT_A:
			if (value == LO)
 524:	41 11       	cpse	r20, r1
 526:	0c c0       	rjmp	.+24     	; 0x540 <DIO_write+0x34>
			{	
				PORTA &= ~(1<<pinNumber);
 528:	2b b3       	in	r18, 0x1b	; 27
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_write+0x28>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_write+0x24>
 538:	80 95       	com	r24
 53a:	82 23       	and	r24, r18
 53c:	8b bb       	out	0x1b, r24	; 27
 53e:	08 95       	ret
			}
			else if(value == HI)
 540:	41 30       	cpi	r20, 0x01	; 1
 542:	09 f0       	breq	.+2      	; 0x546 <DIO_write+0x3a>
 544:	5c c0       	rjmp	.+184    	; 0x5fe <DIO_write+0xf2>
			{
				PORTA |= (1<<pinNumber);
 546:	2b b3       	in	r18, 0x1b	; 27
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	02 c0       	rjmp	.+4      	; 0x552 <DIO_write+0x46>
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	6a 95       	dec	r22
 554:	e2 f7       	brpl	.-8      	; 0x54e <DIO_write+0x42>
 556:	82 2b       	or	r24, r18
 558:	8b bb       	out	0x1b, r24	; 27
 55a:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_B:
			if (value == LO)
 55c:	41 11       	cpse	r20, r1
 55e:	0c c0       	rjmp	.+24     	; 0x578 <DIO_write+0x6c>
			{
				PORTB &= ~(1<<pinNumber);
 560:	28 b3       	in	r18, 0x18	; 24
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_write+0x60>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_write+0x5c>
 570:	80 95       	com	r24
 572:	82 23       	and	r24, r18
 574:	88 bb       	out	0x18, r24	; 24
 576:	08 95       	ret
			}
			else if(value == HI)
 578:	41 30       	cpi	r20, 0x01	; 1
 57a:	09 f0       	breq	.+2      	; 0x57e <DIO_write+0x72>
 57c:	40 c0       	rjmp	.+128    	; 0x5fe <DIO_write+0xf2>
			{
				PORTB |= (1<<pinNumber);
 57e:	28 b3       	in	r18, 0x18	; 24
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_write+0x7e>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_write+0x7a>
 58e:	82 2b       	or	r24, r18
 590:	88 bb       	out	0x18, r24	; 24
 592:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_C:
			if (value == LO)
 594:	41 11       	cpse	r20, r1
 596:	0c c0       	rjmp	.+24     	; 0x5b0 <DIO_write+0xa4>
			{
				PORTC &= ~(1<<pinNumber);
 598:	25 b3       	in	r18, 0x15	; 21
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_write+0x98>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_write+0x94>
 5a8:	80 95       	com	r24
 5aa:	82 23       	and	r24, r18
 5ac:	85 bb       	out	0x15, r24	; 21
 5ae:	08 95       	ret
			}
			else if(value == HI)
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	29 f5       	brne	.+74     	; 0x5fe <DIO_write+0xf2>
			{
				PORTC |= (1<<pinNumber);
 5b4:	25 b3       	in	r18, 0x15	; 21
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_write+0xb4>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_write+0xb0>
 5c4:	82 2b       	or	r24, r18
 5c6:	85 bb       	out	0x15, r24	; 21
 5c8:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_D:
			if (value == LO)
 5ca:	41 11       	cpse	r20, r1
 5cc:	0c c0       	rjmp	.+24     	; 0x5e6 <DIO_write+0xda>
			{
				PORTD &= ~(1<<pinNumber);
 5ce:	22 b3       	in	r18, 0x12	; 18
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_write+0xce>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	6a 95       	dec	r22
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_write+0xca>
 5de:	80 95       	com	r24
 5e0:	82 23       	and	r24, r18
 5e2:	82 bb       	out	0x12, r24	; 18
 5e4:	08 95       	ret
			}
			else if(value == HI)
 5e6:	41 30       	cpi	r20, 0x01	; 1
 5e8:	51 f4       	brne	.+20     	; 0x5fe <DIO_write+0xf2>
			{
				PORTD |= (1<<pinNumber);
 5ea:	22 b3       	in	r18, 0x12	; 18
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_write+0xea>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_write+0xe6>
 5fa:	82 2b       	or	r24, r18
 5fc:	82 bb       	out	0x12, r24	; 18
 5fe:	08 95       	ret

00000600 <TIMER_init>:
#define F_CPU 8000000
#define tickTime 0.032
void TIMER_init()
{
	// Set timer 0 to normal mode
	TCCR0 = 0x00;
 600:	13 be       	out	0x33, r1	; 51

	// Enable timer 0 overflow interrupt
	//TIMSK |= (1 << 0);

	// Enable global interrupts
	SREG |= (1<<7);
 602:	8f b7       	in	r24, 0x3f	; 63
 604:	80 68       	ori	r24, 0x80	; 128
 606:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<<1)|(1<<0); //setting interrupts to rising edge
 608:	85 b7       	in	r24, 0x35	; 53
 60a:	83 60       	ori	r24, 0x03	; 3
 60c:	85 bf       	out	0x35, r24	; 53
 60e:	08 95       	ret

00000610 <TIMER_delay>:
}

void TIMER_delay(uint16_t millisec)
{
 610:	cf 92       	push	r12
 612:	df 92       	push	r13
 614:	ef 92       	push	r14
 616:	ff 92       	push	r15
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	ec 01       	movw	r28, r24
	double maxDelay;
	overflow_Counter = 0;
	maxDelay = 8.192; //max delay in ms possible with this timer configuration
	
	
	if(millisec<maxDelay)
 61e:	bc 01       	movw	r22, r24
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 87 04 	call	0x90e	; 0x90e <__floatunsisf>
 628:	6b 01       	movw	r12, r22
 62a:	7c 01       	movw	r14, r24
 62c:	2f e6       	ldi	r18, 0x6F	; 111
 62e:	32 e1       	ldi	r19, 0x12	; 18
 630:	43 e0       	ldi	r20, 0x03	; 3
 632:	51 e4       	ldi	r21, 0x41	; 65
 634:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__cmpsf2>
 638:	88 23       	and	r24, r24
 63a:	9c f4       	brge	.+38     	; 0x662 <TIMER_delay+0x52>
	{
		TimerInitial = (maxDelay-millisec)/tickTime;
 63c:	a7 01       	movw	r20, r14
 63e:	96 01       	movw	r18, r12
 640:	6f e6       	ldi	r22, 0x6F	; 111
 642:	72 e1       	ldi	r23, 0x12	; 18
 644:	83 e0       	ldi	r24, 0x03	; 3
 646:	91 e4       	ldi	r25, 0x41	; 65
 648:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 64c:	2f e6       	ldi	r18, 0x6F	; 111
 64e:	32 e1       	ldi	r19, 0x12	; 18
 650:	43 e0       	ldi	r20, 0x03	; 3
 652:	5d e3       	ldi	r21, 0x3D	; 61
 654:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divsf3>
 658:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
		numberOfOverflows = 1;
 65c:	c1 e0       	ldi	r28, 0x01	; 1
 65e:	d0 e0       	ldi	r29, 0x00	; 0
 660:	29 c0       	rjmp	.+82     	; 0x6b4 <TIMER_delay+0xa4>
	}
	else if (millisec == (uint16_t) maxDelay)
 662:	28 97       	sbiw	r28, 0x08	; 8
 664:	21 f1       	breq	.+72     	; 0x6ae <TIMER_delay+0x9e>
		TimerInitial = 0;
		numberOfOverflows = 1;
	}
	else
	{
		numberOfOverflows = (uint16_t) (millisec/maxDelay);
 666:	2f e6       	ldi	r18, 0x6F	; 111
 668:	32 e1       	ldi	r19, 0x12	; 18
 66a:	43 e0       	ldi	r20, 0x03	; 3
 66c:	51 e4       	ldi	r21, 0x41	; 65
 66e:	c7 01       	movw	r24, r14
 670:	b6 01       	movw	r22, r12
 672:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divsf3>
 676:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 67a:	eb 01       	movw	r28, r22
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
 67c:	a7 01       	movw	r20, r14
 67e:	96 01       	movw	r18, r12
 680:	6f e6       	ldi	r22, 0x6F	; 111
 682:	72 e1       	ldi	r23, 0x12	; 18
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	91 e4       	ldi	r25, 0x41	; 65
 688:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 68c:	2f e6       	ldi	r18, 0x6F	; 111
 68e:	32 e1       	ldi	r19, 0x12	; 18
 690:	43 e0       	ldi	r20, 0x03	; 3
 692:	5d e3       	ldi	r21, 0x3D	; 61
 694:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__divsf3>
 698:	9b 01       	movw	r18, r22
 69a:	ac 01       	movw	r20, r24
 69c:	60 e0       	ldi	r22, 0x00	; 0
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	80 e8       	ldi	r24, 0x80	; 128
 6a2:	93 e4       	ldi	r25, 0x43	; 67
 6a4:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__subsf3>
 6a8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <__fixunssfsi>
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <TIMER_delay+0xa4>
		TimerInitial = (maxDelay-millisec)/tickTime;
		numberOfOverflows = 1;
	}
	else if (millisec == (uint16_t) maxDelay)
	{
		TimerInitial = 0;
 6ae:	60 e0       	ldi	r22, 0x00	; 0
		numberOfOverflows = 1;
 6b0:	c1 e0       	ldi	r28, 0x01	; 1
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		numberOfOverflows = (uint16_t) (millisec/maxDelay);
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
	}
	
	TCNT0 = TimerInitial;
 6b4:	62 bf       	out	0x32, r22	; 50
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
 6b6:	83 b7       	in	r24, 0x33	; 51
 6b8:	84 60       	ori	r24, 0x04	; 4
 6ba:	83 bf       	out	0x33, r24	; 51

void TIMER_delay(uint16_t millisec)
{
	uint16_t numberOfOverflows, TimerInitial, overflow_Counter ;
	double maxDelay;
	overflow_Counter = 0;
 6bc:	20 e0       	ldi	r18, 0x00	; 0
 6be:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	TCNT0 = TimerInitial;
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
	while (overflow_Counter != numberOfOverflows)
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <TIMER_delay+0xc2>
	{
		while((TIFR & (1<<0)) == 0);
 6c2:	08 b6       	in	r0, 0x38	; 56
 6c4:	00 fe       	sbrs	r0, 0
 6c6:	fd cf       	rjmp	.-6      	; 0x6c2 <TIMER_delay+0xb2>
		TIFR |= (1<<0); //reset overflow flag
 6c8:	88 b7       	in	r24, 0x38	; 56
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	88 bf       	out	0x38, r24	; 56
		overflow_Counter = overflow_Counter + 1 ;
 6ce:	2f 5f       	subi	r18, 0xFF	; 255
 6d0:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
	TCNT0 = TimerInitial;
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
	while (overflow_Counter != numberOfOverflows)
 6d2:	c2 17       	cp	r28, r18
 6d4:	d3 07       	cpc	r29, r19
 6d6:	a9 f7       	brne	.-22     	; 0x6c2 <TIMER_delay+0xb2>
		while((TIFR & (1<<0)) == 0);
		TIFR |= (1<<0); //reset overflow flag
		overflow_Counter = overflow_Counter + 1 ;
		
	}
	TCCR0 = 0; //stop timer
 6d8:	13 be       	out	0x33, r1	; 51
	return ;
}
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	ff 90       	pop	r15
 6e0:	ef 90       	pop	r14
 6e2:	df 90       	pop	r13
 6e4:	cf 90       	pop	r12
 6e6:	08 95       	ret

000006e8 <__subsf3>:
 6e8:	50 58       	subi	r21, 0x80	; 128

000006ea <__addsf3>:
 6ea:	bb 27       	eor	r27, r27
 6ec:	aa 27       	eor	r26, r26
 6ee:	0e 94 8c 03 	call	0x718	; 0x718 <__addsf3x>
 6f2:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_round>
 6f6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_pscA>
 6fa:	38 f0       	brcs	.+14     	; 0x70a <__addsf3+0x20>
 6fc:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__fp_pscB>
 700:	20 f0       	brcs	.+8      	; 0x70a <__addsf3+0x20>
 702:	39 f4       	brne	.+14     	; 0x712 <__addsf3+0x28>
 704:	9f 3f       	cpi	r25, 0xFF	; 255
 706:	19 f4       	brne	.+6      	; 0x70e <__addsf3+0x24>
 708:	26 f4       	brtc	.+8      	; 0x712 <__addsf3+0x28>
 70a:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_nan>
 70e:	0e f4       	brtc	.+2      	; 0x712 <__addsf3+0x28>
 710:	e0 95       	com	r30
 712:	e7 fb       	bst	r30, 7
 714:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>

00000718 <__addsf3x>:
 718:	e9 2f       	mov	r30, r25
 71a:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_split3>
 71e:	58 f3       	brcs	.-42     	; 0x6f6 <__addsf3+0xc>
 720:	ba 17       	cp	r27, r26
 722:	62 07       	cpc	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	95 07       	cpc	r25, r21
 72a:	20 f0       	brcs	.+8      	; 0x734 <__addsf3x+0x1c>
 72c:	79 f4       	brne	.+30     	; 0x74c <__addsf3x+0x34>
 72e:	a6 f5       	brtc	.+104    	; 0x798 <__addsf3x+0x80>
 730:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_zero>
 734:	0e f4       	brtc	.+2      	; 0x738 <__addsf3x+0x20>
 736:	e0 95       	com	r30
 738:	0b 2e       	mov	r0, r27
 73a:	ba 2f       	mov	r27, r26
 73c:	a0 2d       	mov	r26, r0
 73e:	0b 01       	movw	r0, r22
 740:	b9 01       	movw	r22, r18
 742:	90 01       	movw	r18, r0
 744:	0c 01       	movw	r0, r24
 746:	ca 01       	movw	r24, r20
 748:	a0 01       	movw	r20, r0
 74a:	11 24       	eor	r1, r1
 74c:	ff 27       	eor	r31, r31
 74e:	59 1b       	sub	r21, r25
 750:	99 f0       	breq	.+38     	; 0x778 <__addsf3x+0x60>
 752:	59 3f       	cpi	r21, 0xF9	; 249
 754:	50 f4       	brcc	.+20     	; 0x76a <__addsf3x+0x52>
 756:	50 3e       	cpi	r21, 0xE0	; 224
 758:	68 f1       	brcs	.+90     	; 0x7b4 <__addsf3x+0x9c>
 75a:	1a 16       	cp	r1, r26
 75c:	f0 40       	sbci	r31, 0x00	; 0
 75e:	a2 2f       	mov	r26, r18
 760:	23 2f       	mov	r18, r19
 762:	34 2f       	mov	r19, r20
 764:	44 27       	eor	r20, r20
 766:	58 5f       	subi	r21, 0xF8	; 248
 768:	f3 cf       	rjmp	.-26     	; 0x750 <__addsf3x+0x38>
 76a:	46 95       	lsr	r20
 76c:	37 95       	ror	r19
 76e:	27 95       	ror	r18
 770:	a7 95       	ror	r26
 772:	f0 40       	sbci	r31, 0x00	; 0
 774:	53 95       	inc	r21
 776:	c9 f7       	brne	.-14     	; 0x76a <__addsf3x+0x52>
 778:	7e f4       	brtc	.+30     	; 0x798 <__addsf3x+0x80>
 77a:	1f 16       	cp	r1, r31
 77c:	ba 0b       	sbc	r27, r26
 77e:	62 0b       	sbc	r22, r18
 780:	73 0b       	sbc	r23, r19
 782:	84 0b       	sbc	r24, r20
 784:	ba f0       	brmi	.+46     	; 0x7b4 <__addsf3x+0x9c>
 786:	91 50       	subi	r25, 0x01	; 1
 788:	a1 f0       	breq	.+40     	; 0x7b2 <__addsf3x+0x9a>
 78a:	ff 0f       	add	r31, r31
 78c:	bb 1f       	adc	r27, r27
 78e:	66 1f       	adc	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	c2 f7       	brpl	.-16     	; 0x786 <__addsf3x+0x6e>
 796:	0e c0       	rjmp	.+28     	; 0x7b4 <__addsf3x+0x9c>
 798:	ba 0f       	add	r27, r26
 79a:	62 1f       	adc	r22, r18
 79c:	73 1f       	adc	r23, r19
 79e:	84 1f       	adc	r24, r20
 7a0:	48 f4       	brcc	.+18     	; 0x7b4 <__addsf3x+0x9c>
 7a2:	87 95       	ror	r24
 7a4:	77 95       	ror	r23
 7a6:	67 95       	ror	r22
 7a8:	b7 95       	ror	r27
 7aa:	f7 95       	ror	r31
 7ac:	9e 3f       	cpi	r25, 0xFE	; 254
 7ae:	08 f0       	brcs	.+2      	; 0x7b2 <__addsf3x+0x9a>
 7b0:	b0 cf       	rjmp	.-160    	; 0x712 <__addsf3+0x28>
 7b2:	93 95       	inc	r25
 7b4:	88 0f       	add	r24, r24
 7b6:	08 f0       	brcs	.+2      	; 0x7ba <__addsf3x+0xa2>
 7b8:	99 27       	eor	r25, r25
 7ba:	ee 0f       	add	r30, r30
 7bc:	97 95       	ror	r25
 7be:	87 95       	ror	r24
 7c0:	08 95       	ret

000007c2 <__cmpsf2>:
 7c2:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_cmp>
 7c6:	08 f4       	brcc	.+2      	; 0x7ca <__cmpsf2+0x8>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	08 95       	ret

000007cc <__divsf3>:
 7cc:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__divsf3x>
 7d0:	0c 94 ff 04 	jmp	0x9fe	; 0x9fe <__fp_round>
 7d4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__fp_pscB>
 7d8:	58 f0       	brcs	.+22     	; 0x7f0 <__divsf3+0x24>
 7da:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__fp_pscA>
 7de:	40 f0       	brcs	.+16     	; 0x7f0 <__divsf3+0x24>
 7e0:	29 f4       	brne	.+10     	; 0x7ec <__divsf3+0x20>
 7e2:	5f 3f       	cpi	r21, 0xFF	; 255
 7e4:	29 f0       	breq	.+10     	; 0x7f0 <__divsf3+0x24>
 7e6:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>
 7ea:	51 11       	cpse	r21, r1
 7ec:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_szero>
 7f0:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_nan>

000007f4 <__divsf3x>:
 7f4:	0e 94 10 05 	call	0xa20	; 0xa20 <__fp_split3>
 7f8:	68 f3       	brcs	.-38     	; 0x7d4 <__divsf3+0x8>

000007fa <__divsf3_pse>:
 7fa:	99 23       	and	r25, r25
 7fc:	b1 f3       	breq	.-20     	; 0x7ea <__divsf3+0x1e>
 7fe:	55 23       	and	r21, r21
 800:	91 f3       	breq	.-28     	; 0x7e6 <__divsf3+0x1a>
 802:	95 1b       	sub	r25, r21
 804:	55 0b       	sbc	r21, r21
 806:	bb 27       	eor	r27, r27
 808:	aa 27       	eor	r26, r26
 80a:	62 17       	cp	r22, r18
 80c:	73 07       	cpc	r23, r19
 80e:	84 07       	cpc	r24, r20
 810:	38 f0       	brcs	.+14     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 812:	9f 5f       	subi	r25, 0xFF	; 255
 814:	5f 4f       	sbci	r21, 0xFF	; 255
 816:	22 0f       	add	r18, r18
 818:	33 1f       	adc	r19, r19
 81a:	44 1f       	adc	r20, r20
 81c:	aa 1f       	adc	r26, r26
 81e:	a9 f3       	breq	.-22     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 820:	35 d0       	rcall	.+106    	; 0x88c <__stack+0x2d>
 822:	0e 2e       	mov	r0, r30
 824:	3a f0       	brmi	.+14     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 826:	e0 e8       	ldi	r30, 0x80	; 128
 828:	32 d0       	rcall	.+100    	; 0x88e <__stack+0x2f>
 82a:	91 50       	subi	r25, 0x01	; 1
 82c:	50 40       	sbci	r21, 0x00	; 0
 82e:	e6 95       	lsr	r30
 830:	00 1c       	adc	r0, r0
 832:	ca f7       	brpl	.-14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 834:	2b d0       	rcall	.+86     	; 0x88c <__stack+0x2d>
 836:	fe 2f       	mov	r31, r30
 838:	29 d0       	rcall	.+82     	; 0x88c <__stack+0x2d>
 83a:	66 0f       	add	r22, r22
 83c:	77 1f       	adc	r23, r23
 83e:	88 1f       	adc	r24, r24
 840:	bb 1f       	adc	r27, r27
 842:	26 17       	cp	r18, r22
 844:	37 07       	cpc	r19, r23
 846:	48 07       	cpc	r20, r24
 848:	ab 07       	cpc	r26, r27
 84a:	b0 e8       	ldi	r27, 0x80	; 128
 84c:	09 f0       	breq	.+2      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84e:	bb 0b       	sbc	r27, r27
 850:	80 2d       	mov	r24, r0
 852:	bf 01       	movw	r22, r30
 854:	ff 27       	eor	r31, r31
 856:	93 58       	subi	r25, 0x83	; 131
 858:	5f 4f       	sbci	r21, 0xFF	; 255
 85a:	3a f0       	brmi	.+14     	; 0x86a <__stack+0xb>
 85c:	9e 3f       	cpi	r25, 0xFE	; 254
 85e:	51 05       	cpc	r21, r1
 860:	78 f0       	brcs	.+30     	; 0x880 <__stack+0x21>
 862:	0c 94 e8 04 	jmp	0x9d0	; 0x9d0 <__fp_inf>
 866:	0c 94 33 05 	jmp	0xa66	; 0xa66 <__fp_szero>
 86a:	5f 3f       	cpi	r21, 0xFF	; 255
 86c:	e4 f3       	brlt	.-8      	; 0x866 <__stack+0x7>
 86e:	98 3e       	cpi	r25, 0xE8	; 232
 870:	d4 f3       	brlt	.-12     	; 0x866 <__stack+0x7>
 872:	86 95       	lsr	r24
 874:	77 95       	ror	r23
 876:	67 95       	ror	r22
 878:	b7 95       	ror	r27
 87a:	f7 95       	ror	r31
 87c:	9f 5f       	subi	r25, 0xFF	; 255
 87e:	c9 f7       	brne	.-14     	; 0x872 <__stack+0x13>
 880:	88 0f       	add	r24, r24
 882:	91 1d       	adc	r25, r1
 884:	96 95       	lsr	r25
 886:	87 95       	ror	r24
 888:	97 f9       	bld	r25, 7
 88a:	08 95       	ret
 88c:	e1 e0       	ldi	r30, 0x01	; 1
 88e:	66 0f       	add	r22, r22
 890:	77 1f       	adc	r23, r23
 892:	88 1f       	adc	r24, r24
 894:	bb 1f       	adc	r27, r27
 896:	62 17       	cp	r22, r18
 898:	73 07       	cpc	r23, r19
 89a:	84 07       	cpc	r24, r20
 89c:	ba 07       	cpc	r27, r26
 89e:	20 f0       	brcs	.+8      	; 0x8a8 <__stack+0x49>
 8a0:	62 1b       	sub	r22, r18
 8a2:	73 0b       	sbc	r23, r19
 8a4:	84 0b       	sbc	r24, r20
 8a6:	ba 0b       	sbc	r27, r26
 8a8:	ee 1f       	adc	r30, r30
 8aa:	88 f7       	brcc	.-30     	; 0x88e <__stack+0x2f>
 8ac:	e0 95       	com	r30
 8ae:	08 95       	ret

000008b0 <__fixunssfsi>:
 8b0:	0e 94 18 05 	call	0xa30	; 0xa30 <__fp_splitA>
 8b4:	88 f0       	brcs	.+34     	; 0x8d8 <__fixunssfsi+0x28>
 8b6:	9f 57       	subi	r25, 0x7F	; 127
 8b8:	98 f0       	brcs	.+38     	; 0x8e0 <__fixunssfsi+0x30>
 8ba:	b9 2f       	mov	r27, r25
 8bc:	99 27       	eor	r25, r25
 8be:	b7 51       	subi	r27, 0x17	; 23
 8c0:	b0 f0       	brcs	.+44     	; 0x8ee <__fixunssfsi+0x3e>
 8c2:	e1 f0       	breq	.+56     	; 0x8fc <__fixunssfsi+0x4c>
 8c4:	66 0f       	add	r22, r22
 8c6:	77 1f       	adc	r23, r23
 8c8:	88 1f       	adc	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	1a f0       	brmi	.+6      	; 0x8d4 <__fixunssfsi+0x24>
 8ce:	ba 95       	dec	r27
 8d0:	c9 f7       	brne	.-14     	; 0x8c4 <__fixunssfsi+0x14>
 8d2:	14 c0       	rjmp	.+40     	; 0x8fc <__fixunssfsi+0x4c>
 8d4:	b1 30       	cpi	r27, 0x01	; 1
 8d6:	91 f0       	breq	.+36     	; 0x8fc <__fixunssfsi+0x4c>
 8d8:	0e 94 32 05 	call	0xa64	; 0xa64 <__fp_zero>
 8dc:	b1 e0       	ldi	r27, 0x01	; 1
 8de:	08 95       	ret
 8e0:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__fp_zero>
 8e4:	67 2f       	mov	r22, r23
 8e6:	78 2f       	mov	r23, r24
 8e8:	88 27       	eor	r24, r24
 8ea:	b8 5f       	subi	r27, 0xF8	; 248
 8ec:	39 f0       	breq	.+14     	; 0x8fc <__fixunssfsi+0x4c>
 8ee:	b9 3f       	cpi	r27, 0xF9	; 249
 8f0:	cc f3       	brlt	.-14     	; 0x8e4 <__fixunssfsi+0x34>
 8f2:	86 95       	lsr	r24
 8f4:	77 95       	ror	r23
 8f6:	67 95       	ror	r22
 8f8:	b3 95       	inc	r27
 8fa:	d9 f7       	brne	.-10     	; 0x8f2 <__fixunssfsi+0x42>
 8fc:	3e f4       	brtc	.+14     	; 0x90c <__fixunssfsi+0x5c>
 8fe:	90 95       	com	r25
 900:	80 95       	com	r24
 902:	70 95       	com	r23
 904:	61 95       	neg	r22
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	08 95       	ret

0000090e <__floatunsisf>:
 90e:	e8 94       	clt
 910:	09 c0       	rjmp	.+18     	; 0x924 <__floatsisf+0x12>

00000912 <__floatsisf>:
 912:	97 fb       	bst	r25, 7
 914:	3e f4       	brtc	.+14     	; 0x924 <__floatsisf+0x12>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	99 23       	and	r25, r25
 926:	a9 f0       	breq	.+42     	; 0x952 <__floatsisf+0x40>
 928:	f9 2f       	mov	r31, r25
 92a:	96 e9       	ldi	r25, 0x96	; 150
 92c:	bb 27       	eor	r27, r27
 92e:	93 95       	inc	r25
 930:	f6 95       	lsr	r31
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f1 11       	cpse	r31, r1
 93c:	f8 cf       	rjmp	.-16     	; 0x92e <__floatsisf+0x1c>
 93e:	fa f4       	brpl	.+62     	; 0x97e <__floatsisf+0x6c>
 940:	bb 0f       	add	r27, r27
 942:	11 f4       	brne	.+4      	; 0x948 <__floatsisf+0x36>
 944:	60 ff       	sbrs	r22, 0
 946:	1b c0       	rjmp	.+54     	; 0x97e <__floatsisf+0x6c>
 948:	6f 5f       	subi	r22, 0xFF	; 255
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	8f 4f       	sbci	r24, 0xFF	; 255
 94e:	9f 4f       	sbci	r25, 0xFF	; 255
 950:	16 c0       	rjmp	.+44     	; 0x97e <__floatsisf+0x6c>
 952:	88 23       	and	r24, r24
 954:	11 f0       	breq	.+4      	; 0x95a <__floatsisf+0x48>
 956:	96 e9       	ldi	r25, 0x96	; 150
 958:	11 c0       	rjmp	.+34     	; 0x97c <__floatsisf+0x6a>
 95a:	77 23       	and	r23, r23
 95c:	21 f0       	breq	.+8      	; 0x966 <__floatsisf+0x54>
 95e:	9e e8       	ldi	r25, 0x8E	; 142
 960:	87 2f       	mov	r24, r23
 962:	76 2f       	mov	r23, r22
 964:	05 c0       	rjmp	.+10     	; 0x970 <__floatsisf+0x5e>
 966:	66 23       	and	r22, r22
 968:	71 f0       	breq	.+28     	; 0x986 <__floatsisf+0x74>
 96a:	96 e8       	ldi	r25, 0x86	; 134
 96c:	86 2f       	mov	r24, r22
 96e:	70 e0       	ldi	r23, 0x00	; 0
 970:	60 e0       	ldi	r22, 0x00	; 0
 972:	2a f0       	brmi	.+10     	; 0x97e <__floatsisf+0x6c>
 974:	9a 95       	dec	r25
 976:	66 0f       	add	r22, r22
 978:	77 1f       	adc	r23, r23
 97a:	88 1f       	adc	r24, r24
 97c:	da f7       	brpl	.-10     	; 0x974 <__floatsisf+0x62>
 97e:	88 0f       	add	r24, r24
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret

00000988 <__fp_cmp>:
 988:	99 0f       	add	r25, r25
 98a:	00 08       	sbc	r0, r0
 98c:	55 0f       	add	r21, r21
 98e:	aa 0b       	sbc	r26, r26
 990:	e0 e8       	ldi	r30, 0x80	; 128
 992:	fe ef       	ldi	r31, 0xFE	; 254
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	e8 07       	cpc	r30, r24
 99a:	f9 07       	cpc	r31, r25
 99c:	c0 f0       	brcs	.+48     	; 0x9ce <__fp_cmp+0x46>
 99e:	12 16       	cp	r1, r18
 9a0:	13 06       	cpc	r1, r19
 9a2:	e4 07       	cpc	r30, r20
 9a4:	f5 07       	cpc	r31, r21
 9a6:	98 f0       	brcs	.+38     	; 0x9ce <__fp_cmp+0x46>
 9a8:	62 1b       	sub	r22, r18
 9aa:	73 0b       	sbc	r23, r19
 9ac:	84 0b       	sbc	r24, r20
 9ae:	95 0b       	sbc	r25, r21
 9b0:	39 f4       	brne	.+14     	; 0x9c0 <__fp_cmp+0x38>
 9b2:	0a 26       	eor	r0, r26
 9b4:	61 f0       	breq	.+24     	; 0x9ce <__fp_cmp+0x46>
 9b6:	23 2b       	or	r18, r19
 9b8:	24 2b       	or	r18, r20
 9ba:	25 2b       	or	r18, r21
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <__fp_cmp+0x3e>
 9be:	08 95       	ret
 9c0:	0a 26       	eor	r0, r26
 9c2:	09 f4       	brne	.+2      	; 0x9c6 <__fp_cmp+0x3e>
 9c4:	a1 40       	sbci	r26, 0x01	; 1
 9c6:	a6 95       	lsr	r26
 9c8:	8f ef       	ldi	r24, 0xFF	; 255
 9ca:	81 1d       	adc	r24, r1
 9cc:	81 1d       	adc	r24, r1
 9ce:	08 95       	ret

000009d0 <__fp_inf>:
 9d0:	97 f9       	bld	r25, 7
 9d2:	9f 67       	ori	r25, 0x7F	; 127
 9d4:	80 e8       	ldi	r24, 0x80	; 128
 9d6:	70 e0       	ldi	r23, 0x00	; 0
 9d8:	60 e0       	ldi	r22, 0x00	; 0
 9da:	08 95       	ret

000009dc <__fp_nan>:
 9dc:	9f ef       	ldi	r25, 0xFF	; 255
 9de:	80 ec       	ldi	r24, 0xC0	; 192
 9e0:	08 95       	ret

000009e2 <__fp_pscA>:
 9e2:	00 24       	eor	r0, r0
 9e4:	0a 94       	dec	r0
 9e6:	16 16       	cp	r1, r22
 9e8:	17 06       	cpc	r1, r23
 9ea:	18 06       	cpc	r1, r24
 9ec:	09 06       	cpc	r0, r25
 9ee:	08 95       	ret

000009f0 <__fp_pscB>:
 9f0:	00 24       	eor	r0, r0
 9f2:	0a 94       	dec	r0
 9f4:	12 16       	cp	r1, r18
 9f6:	13 06       	cpc	r1, r19
 9f8:	14 06       	cpc	r1, r20
 9fa:	05 06       	cpc	r0, r21
 9fc:	08 95       	ret

000009fe <__fp_round>:
 9fe:	09 2e       	mov	r0, r25
 a00:	03 94       	inc	r0
 a02:	00 0c       	add	r0, r0
 a04:	11 f4       	brne	.+4      	; 0xa0a <__fp_round+0xc>
 a06:	88 23       	and	r24, r24
 a08:	52 f0       	brmi	.+20     	; 0xa1e <__fp_round+0x20>
 a0a:	bb 0f       	add	r27, r27
 a0c:	40 f4       	brcc	.+16     	; 0xa1e <__fp_round+0x20>
 a0e:	bf 2b       	or	r27, r31
 a10:	11 f4       	brne	.+4      	; 0xa16 <__fp_round+0x18>
 a12:	60 ff       	sbrs	r22, 0
 a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fp_round+0x20>
 a16:	6f 5f       	subi	r22, 0xFF	; 255
 a18:	7f 4f       	sbci	r23, 0xFF	; 255
 a1a:	8f 4f       	sbci	r24, 0xFF	; 255
 a1c:	9f 4f       	sbci	r25, 0xFF	; 255
 a1e:	08 95       	ret

00000a20 <__fp_split3>:
 a20:	57 fd       	sbrc	r21, 7
 a22:	90 58       	subi	r25, 0x80	; 128
 a24:	44 0f       	add	r20, r20
 a26:	55 1f       	adc	r21, r21
 a28:	59 f0       	breq	.+22     	; 0xa40 <__fp_splitA+0x10>
 a2a:	5f 3f       	cpi	r21, 0xFF	; 255
 a2c:	71 f0       	breq	.+28     	; 0xa4a <__fp_splitA+0x1a>
 a2e:	47 95       	ror	r20

00000a30 <__fp_splitA>:
 a30:	88 0f       	add	r24, r24
 a32:	97 fb       	bst	r25, 7
 a34:	99 1f       	adc	r25, r25
 a36:	61 f0       	breq	.+24     	; 0xa50 <__fp_splitA+0x20>
 a38:	9f 3f       	cpi	r25, 0xFF	; 255
 a3a:	79 f0       	breq	.+30     	; 0xa5a <__fp_splitA+0x2a>
 a3c:	87 95       	ror	r24
 a3e:	08 95       	ret
 a40:	12 16       	cp	r1, r18
 a42:	13 06       	cpc	r1, r19
 a44:	14 06       	cpc	r1, r20
 a46:	55 1f       	adc	r21, r21
 a48:	f2 cf       	rjmp	.-28     	; 0xa2e <__fp_split3+0xe>
 a4a:	46 95       	lsr	r20
 a4c:	f1 df       	rcall	.-30     	; 0xa30 <__fp_splitA>
 a4e:	08 c0       	rjmp	.+16     	; 0xa60 <__fp_splitA+0x30>
 a50:	16 16       	cp	r1, r22
 a52:	17 06       	cpc	r1, r23
 a54:	18 06       	cpc	r1, r24
 a56:	99 1f       	adc	r25, r25
 a58:	f1 cf       	rjmp	.-30     	; 0xa3c <__fp_splitA+0xc>
 a5a:	86 95       	lsr	r24
 a5c:	71 05       	cpc	r23, r1
 a5e:	61 05       	cpc	r22, r1
 a60:	08 94       	sec
 a62:	08 95       	ret

00000a64 <__fp_zero>:
 a64:	e8 94       	clt

00000a66 <__fp_szero>:
 a66:	bb 27       	eor	r27, r27
 a68:	66 27       	eor	r22, r22
 a6a:	77 27       	eor	r23, r23
 a6c:	cb 01       	movw	r24, r22
 a6e:	97 f9       	bld	r25, 7
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
