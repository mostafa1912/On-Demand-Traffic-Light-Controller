
Traffic Light Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000a92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001420  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c0  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b2d  00000000  00000000  00002928  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00003458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053c  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000729  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004301  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
  74:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <appInit>:
#include "../Utilities/Interrupts.h"
#include "../EUCAL/LED driver/LED.h"

void appInit(){
//initializing LEDs
LED_init(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>
LED_init(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>
LED_init(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>

LED_init(LED_PED_PORT,LED_PED_PORT_R_PIN);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>
LED_init(LED_PED_PORT,LED_PED_PORT_Y_PIN);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>
LED_init(LED_PED_PORT,LED_PED_PORT_G_PIN);
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 c5 01 	call	0x38a	; 0x38a <LED_init>

//initialize timer to normal mode
TIMER_init();
  ac:	0e 94 cc 02 	call	0x598	; 0x598 <TIMER_init>

//initialize button
BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	84 e4       	ldi	r24, 0x44	; 68
  b4:	0e 94 bc 01 	call	0x378	; 0x378 <BUTTON_init>
  b8:	08 95       	ret

000000ba <normalMode>:
EN_mode_t mode;
EN_carColor_t carColor;


void normalMode()
{
  ba:	cf 93       	push	r28
	//turn green led on
	LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
	carColor = GREEN;
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carColor>
	
	
	TIMER_delay(5000); //delay 5 seconds
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	93 e1       	ldi	r25, 0x13	; 19
  de:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn green led off
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	81 e4       	ldi	r24, 0x41	; 65
  e6:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
	
	//now i need the yellow light to blink for 5 seconds
	
	carColor = YELLOW;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carColor>
	for (uint8_t i = 0; i < 5;i++)
  f0:	c0 e0       	ldi	r28, 0x00	; 0
  f2:	11 c0       	rjmp	.+34     	; 0x116 <normalMode+0x5c>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	81 e4       	ldi	r24, 0x41	; 65
  f8:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		TIMER_delay(500);
  fc:	84 ef       	ldi	r24, 0xF4	; 244
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	81 e4       	ldi	r24, 0x41	; 65
 108:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		TIMER_delay(500);
 10c:	84 ef       	ldi	r24, 0xF4	; 244
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn green led off
	
	//now i need the yellow light to blink for 5 seconds
	
	carColor = YELLOW;
	for (uint8_t i = 0; i < 5;i++)
 114:	cf 5f       	subi	r28, 0xFF	; 255
 116:	c5 30       	cpi	r28, 0x05	; 5
 118:	68 f3       	brcs	.-38     	; 0xf4 <normalMode+0x3a>
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		TIMER_delay(500);
	}
	
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
	
	
	
	//Turn on Red LED
	carColor = RED;
 122:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <carColor>
	LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	81 e4       	ldi	r24, 0x41	; 65
 12a:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
	TIMER_delay(5000);
 12e:	88 e8       	ldi	r24, 0x88	; 136
 130:	93 e1       	ldi	r25, 0x13	; 19
 132:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //turn red off
 136:	62 e0       	ldi	r22, 0x02	; 2
 138:	81 e4       	ldi	r24, 0x41	; 65
 13a:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
	
	carColor = YELLOW;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <carColor>
	for (uint8_t i = 0; i < 5;i++)
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	11 c0       	rjmp	.+34     	; 0x16a <normalMode+0xb0>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	81 e4       	ldi	r24, 0x41	; 65
 14c:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		TIMER_delay(500);
 150:	84 ef       	ldi	r24, 0xF4	; 244
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	81 e4       	ldi	r24, 0x41	; 65
 15c:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		TIMER_delay(500);
 160:	84 ef       	ldi	r24, 0xF4	; 244
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
	LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
	TIMER_delay(5000);
	LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //turn red off
	
	carColor = YELLOW;
	for (uint8_t i = 0; i < 5;i++)
 168:	cf 5f       	subi	r28, 0xFF	; 255
 16a:	c5 30       	cpi	r28, 0x05	; 5
 16c:	68 f3       	brcs	.-38     	; 0x148 <normalMode+0x8e>
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		TIMER_delay(500);
	}
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	81 e4       	ldi	r24, 0x41	; 65
 172:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
	
}
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <pedestrianMode>:



void pedestrianMode()
{
 17a:	cf 93       	push	r28
	switch(carColor)
 17c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <carColor>
 180:	88 23       	and	r24, r24
 182:	21 f0       	breq	.+8      	; 0x18c <pedestrianMode+0x12>
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	09 f4       	brne	.+2      	; 0x18a <pedestrianMode+0x10>
 188:	4d c0       	rjmp	.+154    	; 0x224 <pedestrianMode+0xaa>
 18a:	c0 c0       	rjmp	.+384    	; 0x30c <pedestrianMode+0x192>
	{
		case RED :
		//car LEDs
		LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	81 e4       	ldi	r24, 0x41	; 65
 190:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	81 e4       	ldi	r24, 0x41	; 65
 198:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		
		//pedestrian LEDs
		LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN);
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN);
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	82 e4       	ldi	r24, 0x42	; 66
 1b0:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	82 e4       	ldi	r24, 0x42	; 66
 1b8:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		
		TIMER_delay(5000);
 1bc:	88 e8       	ldi	r24, 0x88	; 136
 1be:	93 e1       	ldi	r25, 0x13	; 19
 1c0:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		
		LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	81 e4       	ldi	r24, 0x41	; 65
 1c8:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		
		for (uint8_t i = 0; i < 5;i++)
 1cc:	c0 e0       	ldi	r28, 0x00	; 0
 1ce:	19 c0       	rjmp	.+50     	; 0x202 <pedestrianMode+0x88>
		{
			LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	82 e4       	ldi	r24, 0x42	; 66
 1dc:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
			TIMER_delay(500);
 1e0:	84 ef       	ldi	r24, 0xF4	; 244
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	81 e4       	ldi	r24, 0x41	; 65
 1ec:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
			LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	82 e4       	ldi	r24, 0x42	; 66
 1f4:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
			TIMER_delay(500);
 1f8:	84 ef       	ldi	r24, 0xF4	; 244
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		
		TIMER_delay(5000);
		
		LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
		
		for (uint8_t i = 0; i < 5;i++)
 200:	cf 5f       	subi	r28, 0xFF	; 255
 202:	c5 30       	cpi	r28, 0x05	; 5
 204:	28 f3       	brcs	.-54     	; 0x1d0 <pedestrianMode+0x56>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
			LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
			TIMER_delay(500);
		}
		
		LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	82 e4       	ldi	r24, 0x42	; 66
 20a:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	81 e4       	ldi	r24, 0x41	; 65
 212:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	82 e4       	ldi	r24, 0x42	; 66
 21a:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		
		
		mode = NORMAL ;
 21e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
 222:	74 c0       	rjmp	.+232    	; 0x30c <pedestrianMode+0x192>
		
		case (YELLOW || GREEN):
		//car LEDs
		LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	81 e4       	ldi	r24, 0x41	; 65
 228:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 22c:	60 e0       	ldi	r22, 0x00	; 0
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	81 e4       	ldi	r24, 0x41	; 65
 238:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		
		//pedestrian LEDs
		LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN);
 244:	62 e0       	ldi	r22, 0x02	; 2
 246:	82 e4       	ldi	r24, 0x42	; 66
 248:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	82 e4       	ldi	r24, 0x42	; 66
 250:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		
		TIMER_delay(5000);
 254:	88 e8       	ldi	r24, 0x88	; 136
 256:	93 e1       	ldi	r25, 0x13	; 19
 258:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		
		for (uint8_t i = 0; i < 5;i++)
 25c:	c0 e0       	ldi	r28, 0x00	; 0
 25e:	19 c0       	rjmp	.+50     	; 0x292 <pedestrianMode+0x118>
		{
			LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	82 e4       	ldi	r24, 0x42	; 66
 26c:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
			TIMER_delay(500);
 270:	84 ef       	ldi	r24, 0xF4	; 244
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	81 e4       	ldi	r24, 0x41	; 65
 27c:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
			LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	82 e4       	ldi	r24, 0x42	; 66
 284:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
			TIMER_delay(500);
 288:	84 ef       	ldi	r24, 0xF4	; 244
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN);
		LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
		
		TIMER_delay(5000);
		
		for (uint8_t i = 0; i < 5;i++)
 290:	cf 5f       	subi	r28, 0xFF	; 255
 292:	c5 30       	cpi	r28, 0x05	; 5
 294:	28 f3       	brcs	.-54     	; 0x260 <pedestrianMode+0xe6>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
			LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
			TIMER_delay(500);
		}
		
		LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	81 e4       	ldi	r24, 0x41	; 65
 29a:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN);
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	82 e4       	ldi	r24, 0x42	; 66
 2a2:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		
		TIMER_delay(5000);
 2a6:	88 e8       	ldi	r24, 0x88	; 136
 2a8:	93 e1       	ldi	r25, 0x13	; 19
 2aa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	81 e4       	ldi	r24, 0x41	; 65
 2b2:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		
		for (uint8_t i = 0; i < 5;i++)
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	19 c0       	rjmp	.+50     	; 0x2ec <pedestrianMode+0x172>
		{
			LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	82 e4       	ldi	r24, 0x42	; 66
 2c6:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
			TIMER_delay(500);
 2ca:	84 ef       	ldi	r24, 0xF4	; 244
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	81 e4       	ldi	r24, 0x41	; 65
 2d6:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
			LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	82 e4       	ldi	r24, 0x42	; 66
 2de:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
			TIMER_delay(500);
 2e2:	84 ef       	ldi	r24, 0xF4	; 244
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <TIMER_delay>
		LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN);
		
		TIMER_delay(5000);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
		
		for (uint8_t i = 0; i < 5;i++)
 2ea:	cf 5f       	subi	r28, 0xFF	; 255
 2ec:	c5 30       	cpi	r28, 0x05	; 5
 2ee:	28 f3       	brcs	.-54     	; 0x2ba <pedestrianMode+0x140>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
			LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
			TIMER_delay(500);
		}
		
		LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	82 e4       	ldi	r24, 0x42	; 66
 2f4:	0e 94 cd 01 	call	0x39a	; 0x39a <LED_off>
		LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN);
 300:	62 e0       	ldi	r22, 0x02	; 2
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	0e 94 c9 01 	call	0x392	; 0x392 <LED_on>
		
		mode = NORMAL ;
 308:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		break;
	}
	
	
}
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <appStart>:

void appStart()
{	
	while(1)
	{
		if (mode == NORMAL)
 310:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 314:	81 11       	cpse	r24, r1
 316:	03 c0       	rjmp	.+6      	; 0x31e <appStart+0xe>
		{
			normalMode();	
 318:	0e 94 5d 00 	call	0xba	; 0xba <normalMode>
 31c:	f9 cf       	rjmp	.-14     	; 0x310 <appStart>
		}
		else if (mode == PEDESTRIAN)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	b9 f7       	brne	.-18     	; 0x310 <appStart>
		{
			pedestrianMode();
 322:	0e 94 bd 00 	call	0x17a	; 0x17a <pedestrianMode>
 326:	f4 cf       	rjmp	.-24     	; 0x310 <appStart>

00000328 <__vector_2>:




ISR(EXT_INT_0)
{	
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
	cli();
 34a:	0e 94 40 03 	call	0x680	; 0x680 <cli>
	pedestrianMode();
 34e:	0e 94 bd 00 	call	0x17a	; 0x17a <pedestrianMode>
	sei();
 352:	0e 94 44 03 	call	0x688	; 0x688 <sei>
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <BUTTON_init>:
#include "Button.h"


void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
		DIO_init(BUTTON_PORT,BUTTON_PIN,IN);
 378:	40 e0       	ldi	r20, 0x00	; 0
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	84 e4       	ldi	r24, 0x44	; 68
 37e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <DIO_init>
		GICR |= (1<<6); //enabling external interrupt 0
 382:	8b b7       	in	r24, 0x3b	; 59
 384:	80 64       	ori	r24, 0x40	; 64
 386:	8b bf       	out	0x3b, r24	; 59
 388:	08 95       	ret

0000038a <LED_init>:
#include "LED.h"


void LED_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUT);	
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <DIO_init>
 390:	08 95       	ret

00000392 <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,HI);
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_write>
 398:	08 95       	ret

0000039a <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LO);
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <DIO_write>
 3a0:	08 95       	ret

000003a2 <main>:
// 		TIMER_delay(5000);
// 		DIO_toggle(PORT_A,PIN2);
// 		
// 		
//     }
	appInit();
 3a2:	0e 94 3e 00 	call	0x7c	; 0x7c <appInit>
	appStart();
 3a6:	0e 94 88 01 	call	0x310	; 0x310 <appStart>
}
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	08 95       	ret

000003b0 <DIO_init>:
#include "DIO.h"


void DIO_init(uint8_t portName, uint8_t pinNumber,uint8_t direction) //sets the wanted pin on the atmega 32 as either input or output by modifying the registers
{
	switch (portName){
 3b0:	82 34       	cpi	r24, 0x42	; 66
 3b2:	31 f1       	breq	.+76     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3b4:	18 f4       	brcc	.+6      	; 0x3bc <DIO_init+0xc>
 3b6:	81 34       	cpi	r24, 0x41	; 65
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <DIO_init+0x18>
 3ba:	08 95       	ret
 3bc:	83 34       	cpi	r24, 0x43	; 67
 3be:	e1 f1       	breq	.+120    	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 3c0:	84 34       	cpi	r24, 0x44	; 68
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <DIO_init+0x16>
 3c4:	54 c0       	rjmp	.+168    	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 3c6:	08 95       	ret
		case PORT_A:
			if (direction == IN)
 3c8:	41 11       	cpse	r20, r1
 3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <DIO_init+0x34>
			{
				DDRA &= ~(1<<pinNumber);
 3cc:	2a b3       	in	r18, 0x1a	; 26
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_init+0x28>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_init+0x24>
 3dc:	80 95       	com	r24
 3de:	82 23       	and	r24, r18
 3e0:	8a bb       	out	0x1a, r24	; 26
 3e2:	08 95       	ret
			}
			else if (direction == OUT) 
 3e4:	41 30       	cpi	r20, 0x01	; 1
 3e6:	09 f0       	breq	.+2      	; 0x3ea <DIO_init+0x3a>
 3e8:	5c c0       	rjmp	.+184    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				DDRA |= (1<<pinNumber);
 3ea:	2a b3       	in	r18, 0x1a	; 26
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_init+0x46>
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	6a 95       	dec	r22
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_init+0x42>
 3fa:	82 2b       	or	r24, r18
 3fc:	8a bb       	out	0x1a, r24	; 26
 3fe:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_B:
			if (direction == IN)
 400:	41 11       	cpse	r20, r1
 402:	0c c0       	rjmp	.+24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			{
				DDRB &= ~(1<<pinNumber);
 404:	27 b3       	in	r18, 0x17	; 23
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	6a 95       	dec	r22
 412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 414:	80 95       	com	r24
 416:	82 23       	and	r24, r18
 418:	87 bb       	out	0x17, r24	; 23
 41a:	08 95       	ret
			}
			else if (direction == OUT)
 41c:	41 30       	cpi	r20, 0x01	; 1
 41e:	09 f0       	breq	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	40 c0       	rjmp	.+128    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				DDRB |= (1<<pinNumber);
 422:	27 b3       	in	r18, 0x17	; 23
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 c0       	rjmp	.+4      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 432:	82 2b       	or	r24, r18
 434:	87 bb       	out	0x17, r24	; 23
 436:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_C:
			if (direction == IN)
 438:	41 11       	cpse	r20, r1
 43a:	0c c0       	rjmp	.+24     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
			{
				DDRC &= ~(1<<pinNumber);
 43c:	24 b3       	in	r18, 0x14	; 20
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	84 bb       	out	0x14, r24	; 20
 452:	08 95       	ret
			}
			else if (direction == OUT)
 454:	41 30       	cpi	r20, 0x01	; 1
 456:	29 f5       	brne	.+74     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				DDRC |= (1<<pinNumber);
 458:	24 b3       	in	r18, 0x14	; 20
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	6a 95       	dec	r22
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	82 2b       	or	r24, r18
 46a:	84 bb       	out	0x14, r24	; 20
 46c:	08 95       	ret
				//error handling
			}
			break;
		
		case PORT_D:
			if (direction == IN)
 46e:	41 11       	cpse	r20, r1
 470:	0c c0       	rjmp	.+24     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
			{
				DDRD &= ~(1<<pinNumber);
 472:	21 b3       	in	r18, 0x11	; 17
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 482:	80 95       	com	r24
 484:	82 23       	and	r24, r18
 486:	81 bb       	out	0x11, r24	; 17
 488:	08 95       	ret
			}
			else if (direction == OUT)
 48a:	41 30       	cpi	r20, 0x01	; 1
 48c:	51 f4       	brne	.+20     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				DDRD |= (1<<pinNumber);
 48e:	21 b3       	in	r18, 0x11	; 17
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	82 2b       	or	r24, r18
 4a0:	81 bb       	out	0x11, r24	; 17
 4a2:	08 95       	ret

000004a4 <DIO_write>:
			
}

void DIO_write(uint8_t portName, uint8_t pinNumber,uint8_t value)
{
	switch (portName)
 4a4:	82 34       	cpi	r24, 0x42	; 66
 4a6:	31 f1       	breq	.+76     	; 0x4f4 <DIO_write+0x50>
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <DIO_write+0xc>
 4aa:	81 34       	cpi	r24, 0x41	; 65
 4ac:	39 f0       	breq	.+14     	; 0x4bc <DIO_write+0x18>
 4ae:	08 95       	ret
 4b0:	83 34       	cpi	r24, 0x43	; 67
 4b2:	e1 f1       	breq	.+120    	; 0x52c <DIO_write+0x88>
 4b4:	84 34       	cpi	r24, 0x44	; 68
 4b6:	09 f4       	brne	.+2      	; 0x4ba <DIO_write+0x16>
 4b8:	54 c0       	rjmp	.+168    	; 0x562 <DIO_write+0xbe>
 4ba:	08 95       	ret
	{
		case PORT_A:
			if (value == LO)
 4bc:	41 11       	cpse	r20, r1
 4be:	0c c0       	rjmp	.+24     	; 0x4d8 <DIO_write+0x34>
			{	
				PORTA &= ~(1<<pinNumber);
 4c0:	2b b3       	in	r18, 0x1b	; 27
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <DIO_write+0x28>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <DIO_write+0x24>
 4d0:	80 95       	com	r24
 4d2:	82 23       	and	r24, r18
 4d4:	8b bb       	out	0x1b, r24	; 27
 4d6:	08 95       	ret
			}
			else if(value == HI)
 4d8:	41 30       	cpi	r20, 0x01	; 1
 4da:	09 f0       	breq	.+2      	; 0x4de <DIO_write+0x3a>
 4dc:	5c c0       	rjmp	.+184    	; 0x596 <DIO_write+0xf2>
			{
				PORTA |= (1<<pinNumber);
 4de:	2b b3       	in	r18, 0x1b	; 27
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_write+0x46>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	6a 95       	dec	r22
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_write+0x42>
 4ee:	82 2b       	or	r24, r18
 4f0:	8b bb       	out	0x1b, r24	; 27
 4f2:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_B:
			if (value == LO)
 4f4:	41 11       	cpse	r20, r1
 4f6:	0c c0       	rjmp	.+24     	; 0x510 <DIO_write+0x6c>
			{
				PORTB &= ~(1<<pinNumber);
 4f8:	28 b3       	in	r18, 0x18	; 24
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <DIO_write+0x60>
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	6a 95       	dec	r22
 506:	e2 f7       	brpl	.-8      	; 0x500 <DIO_write+0x5c>
 508:	80 95       	com	r24
 50a:	82 23       	and	r24, r18
 50c:	88 bb       	out	0x18, r24	; 24
 50e:	08 95       	ret
			}
			else if(value == HI)
 510:	41 30       	cpi	r20, 0x01	; 1
 512:	09 f0       	breq	.+2      	; 0x516 <DIO_write+0x72>
 514:	40 c0       	rjmp	.+128    	; 0x596 <DIO_write+0xf2>
			{
				PORTB |= (1<<pinNumber);
 516:	28 b3       	in	r18, 0x18	; 24
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <DIO_write+0x7e>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	6a 95       	dec	r22
 524:	e2 f7       	brpl	.-8      	; 0x51e <DIO_write+0x7a>
 526:	82 2b       	or	r24, r18
 528:	88 bb       	out	0x18, r24	; 24
 52a:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_C:
			if (value == LO)
 52c:	41 11       	cpse	r20, r1
 52e:	0c c0       	rjmp	.+24     	; 0x548 <DIO_write+0xa4>
			{
				PORTC &= ~(1<<pinNumber);
 530:	25 b3       	in	r18, 0x15	; 21
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_write+0x98>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_write+0x94>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	85 bb       	out	0x15, r24	; 21
 546:	08 95       	ret
			}
			else if(value == HI)
 548:	41 30       	cpi	r20, 0x01	; 1
 54a:	29 f5       	brne	.+74     	; 0x596 <DIO_write+0xf2>
			{
				PORTC |= (1<<pinNumber);
 54c:	25 b3       	in	r18, 0x15	; 21
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_write+0xb4>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	6a 95       	dec	r22
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_write+0xb0>
 55c:	82 2b       	or	r24, r18
 55e:	85 bb       	out	0x15, r24	; 21
 560:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_D:
			if (value == LO)
 562:	41 11       	cpse	r20, r1
 564:	0c c0       	rjmp	.+24     	; 0x57e <DIO_write+0xda>
			{
				PORTD &= ~(1<<pinNumber);
 566:	22 b3       	in	r18, 0x12	; 18
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_write+0xce>
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_write+0xca>
 576:	80 95       	com	r24
 578:	82 23       	and	r24, r18
 57a:	82 bb       	out	0x12, r24	; 18
 57c:	08 95       	ret
			}
			else if(value == HI)
 57e:	41 30       	cpi	r20, 0x01	; 1
 580:	51 f4       	brne	.+20     	; 0x596 <DIO_write+0xf2>
			{
				PORTD |= (1<<pinNumber);
 582:	22 b3       	in	r18, 0x12	; 18
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_write+0xea>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_write+0xe6>
 592:	82 2b       	or	r24, r18
 594:	82 bb       	out	0x12, r24	; 18
 596:	08 95       	ret

00000598 <TIMER_init>:
#define F_CPU 8000000
#define tickTime 0.032
void TIMER_init()
{
	// Set timer 0 to normal mode
	TCCR0 = 0x00;
 598:	13 be       	out	0x33, r1	; 51

	// Enable timer 0 overflow interrupt
	//TIMSK |= (1 << 0);

	// Enable global interrupts
	SREG |= (1<<7);
 59a:	8f b7       	in	r24, 0x3f	; 63
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<<3)|(1<<2); //setting interrupts to rising edge
 5a0:	85 b7       	in	r24, 0x35	; 53
 5a2:	8c 60       	ori	r24, 0x0C	; 12
 5a4:	85 bf       	out	0x35, r24	; 53
 5a6:	08 95       	ret

000005a8 <TIMER_delay>:
}

void TIMER_delay(uint16_t millisec)
{
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	ec 01       	movw	r28, r24
	double maxDelay;
	overflow_Counter = 0;
	maxDelay = 8.192; //max delay in ms possible with this timer configuration
	
	
	if(millisec<maxDelay)
 5b6:	bc 01       	movw	r22, r24
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
 5c0:	6b 01       	movw	r12, r22
 5c2:	7c 01       	movw	r14, r24
 5c4:	2f e6       	ldi	r18, 0x6F	; 111
 5c6:	32 e1       	ldi	r19, 0x12	; 18
 5c8:	43 e0       	ldi	r20, 0x03	; 3
 5ca:	51 e4       	ldi	r21, 0x41	; 65
 5cc:	0e 94 b5 03 	call	0x76a	; 0x76a <__cmpsf2>
 5d0:	88 23       	and	r24, r24
 5d2:	9c f4       	brge	.+38     	; 0x5fa <TIMER_delay+0x52>
	{
		TimerInitial = (maxDelay-millisec)/tickTime;
 5d4:	a7 01       	movw	r20, r14
 5d6:	96 01       	movw	r18, r12
 5d8:	6f e6       	ldi	r22, 0x6F	; 111
 5da:	72 e1       	ldi	r23, 0x12	; 18
 5dc:	83 e0       	ldi	r24, 0x03	; 3
 5de:	91 e4       	ldi	r25, 0x41	; 65
 5e0:	0e 94 48 03 	call	0x690	; 0x690 <__subsf3>
 5e4:	2f e6       	ldi	r18, 0x6F	; 111
 5e6:	32 e1       	ldi	r19, 0x12	; 18
 5e8:	43 e0       	ldi	r20, 0x03	; 3
 5ea:	5d e3       	ldi	r21, 0x3D	; 61
 5ec:	0e 94 ba 03 	call	0x774	; 0x774 <__divsf3>
 5f0:	0e 94 2c 04 	call	0x858	; 0x858 <__fixunssfsi>
		numberOfOverflows = 1;
 5f4:	c1 e0       	ldi	r28, 0x01	; 1
 5f6:	d0 e0       	ldi	r29, 0x00	; 0
 5f8:	29 c0       	rjmp	.+82     	; 0x64c <TIMER_delay+0xa4>
	}
	else if (millisec == (uint16_t) maxDelay)
 5fa:	28 97       	sbiw	r28, 0x08	; 8
 5fc:	21 f1       	breq	.+72     	; 0x646 <TIMER_delay+0x9e>
		TimerInitial = 0;
		numberOfOverflows = 1;
	}
	else
	{
		numberOfOverflows = (uint16_t) (millisec/maxDelay);
 5fe:	2f e6       	ldi	r18, 0x6F	; 111
 600:	32 e1       	ldi	r19, 0x12	; 18
 602:	43 e0       	ldi	r20, 0x03	; 3
 604:	51 e4       	ldi	r21, 0x41	; 65
 606:	c7 01       	movw	r24, r14
 608:	b6 01       	movw	r22, r12
 60a:	0e 94 ba 03 	call	0x774	; 0x774 <__divsf3>
 60e:	0e 94 2c 04 	call	0x858	; 0x858 <__fixunssfsi>
 612:	eb 01       	movw	r28, r22
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
 614:	a7 01       	movw	r20, r14
 616:	96 01       	movw	r18, r12
 618:	6f e6       	ldi	r22, 0x6F	; 111
 61a:	72 e1       	ldi	r23, 0x12	; 18
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	91 e4       	ldi	r25, 0x41	; 65
 620:	0e 94 48 03 	call	0x690	; 0x690 <__subsf3>
 624:	2f e6       	ldi	r18, 0x6F	; 111
 626:	32 e1       	ldi	r19, 0x12	; 18
 628:	43 e0       	ldi	r20, 0x03	; 3
 62a:	5d e3       	ldi	r21, 0x3D	; 61
 62c:	0e 94 ba 03 	call	0x774	; 0x774 <__divsf3>
 630:	9b 01       	movw	r18, r22
 632:	ac 01       	movw	r20, r24
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	80 e8       	ldi	r24, 0x80	; 128
 63a:	93 e4       	ldi	r25, 0x43	; 67
 63c:	0e 94 48 03 	call	0x690	; 0x690 <__subsf3>
 640:	0e 94 2c 04 	call	0x858	; 0x858 <__fixunssfsi>
 644:	03 c0       	rjmp	.+6      	; 0x64c <TIMER_delay+0xa4>
		TimerInitial = (maxDelay-millisec)/tickTime;
		numberOfOverflows = 1;
	}
	else if (millisec == (uint16_t) maxDelay)
	{
		TimerInitial = 0;
 646:	60 e0       	ldi	r22, 0x00	; 0
		numberOfOverflows = 1;
 648:	c1 e0       	ldi	r28, 0x01	; 1
 64a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		numberOfOverflows = (uint16_t) (millisec/maxDelay);
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
	}
	
	TCNT0 = TimerInitial;
 64c:	62 bf       	out	0x32, r22	; 50
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
 64e:	83 b7       	in	r24, 0x33	; 51
 650:	84 60       	ori	r24, 0x04	; 4
 652:	83 bf       	out	0x33, r24	; 51

void TIMER_delay(uint16_t millisec)
{
	uint16_t numberOfOverflows, TimerInitial, overflow_Counter ;
	double maxDelay;
	overflow_Counter = 0;
 654:	20 e0       	ldi	r18, 0x00	; 0
 656:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	TCNT0 = TimerInitial;
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
	while (overflow_Counter != numberOfOverflows)
 658:	08 c0       	rjmp	.+16     	; 0x66a <TIMER_delay+0xc2>
	{
		while((TIFR & (1<<0)) == 0);
 65a:	08 b6       	in	r0, 0x38	; 56
 65c:	00 fe       	sbrs	r0, 0
 65e:	fd cf       	rjmp	.-6      	; 0x65a <TIMER_delay+0xb2>
		TIFR |= (1<<0); //reset overflow flag
 660:	88 b7       	in	r24, 0x38	; 56
 662:	81 60       	ori	r24, 0x01	; 1
 664:	88 bf       	out	0x38, r24	; 56
		overflow_Counter = overflow_Counter + 1 ;
 666:	2f 5f       	subi	r18, 0xFF	; 255
 668:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
	TCNT0 = TimerInitial;
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
	while (overflow_Counter != numberOfOverflows)
 66a:	c2 17       	cp	r28, r18
 66c:	d3 07       	cpc	r29, r19
 66e:	a9 f7       	brne	.-22     	; 0x65a <TIMER_delay+0xb2>
		while((TIFR & (1<<0)) == 0);
		TIFR |= (1<<0); //reset overflow flag
		overflow_Counter = overflow_Counter + 1 ;
		
	}
	TCCR0 = 0; //stop timer
 670:	13 be       	out	0x33, r1	; 51
	return ;
}
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	df 90       	pop	r13
 67c:	cf 90       	pop	r12
 67e:	08 95       	ret

00000680 <cli>:
#include "Registers.h"

void cli() //using it to disable interrupts
{
	SREG &= ~(1<<7);
 680:	8f b7       	in	r24, 0x3f	; 63
 682:	8f 77       	andi	r24, 0x7F	; 127
 684:	8f bf       	out	0x3f, r24	; 63
 686:	08 95       	ret

00000688 <sei>:
}
void sei() //to enable interrupts
{
	SREG |= (1<<7);
 688:	8f b7       	in	r24, 0x3f	; 63
 68a:	80 68       	ori	r24, 0x80	; 128
 68c:	8f bf       	out	0x3f, r24	; 63
 68e:	08 95       	ret

00000690 <__subsf3>:
 690:	50 58       	subi	r21, 0x80	; 128

00000692 <__addsf3>:
 692:	bb 27       	eor	r27, r27
 694:	aa 27       	eor	r26, r26
 696:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__addsf3x>
 69a:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_round>
 69e:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_pscA>
 6a2:	38 f0       	brcs	.+14     	; 0x6b2 <__addsf3+0x20>
 6a4:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_pscB>
 6a8:	20 f0       	brcs	.+8      	; 0x6b2 <__addsf3+0x20>
 6aa:	39 f4       	brne	.+14     	; 0x6ba <__addsf3+0x28>
 6ac:	9f 3f       	cpi	r25, 0xFF	; 255
 6ae:	19 f4       	brne	.+6      	; 0x6b6 <__addsf3+0x24>
 6b0:	26 f4       	brtc	.+8      	; 0x6ba <__addsf3+0x28>
 6b2:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_nan>
 6b6:	0e f4       	brtc	.+2      	; 0x6ba <__addsf3+0x28>
 6b8:	e0 95       	com	r30
 6ba:	e7 fb       	bst	r30, 7
 6bc:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_inf>

000006c0 <__addsf3x>:
 6c0:	e9 2f       	mov	r30, r25
 6c2:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_split3>
 6c6:	58 f3       	brcs	.-42     	; 0x69e <__addsf3+0xc>
 6c8:	ba 17       	cp	r27, r26
 6ca:	62 07       	cpc	r22, r18
 6cc:	73 07       	cpc	r23, r19
 6ce:	84 07       	cpc	r24, r20
 6d0:	95 07       	cpc	r25, r21
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__addsf3x+0x1c>
 6d4:	79 f4       	brne	.+30     	; 0x6f4 <__addsf3x+0x34>
 6d6:	a6 f5       	brtc	.+104    	; 0x740 <__addsf3x+0x80>
 6d8:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_zero>
 6dc:	0e f4       	brtc	.+2      	; 0x6e0 <__addsf3x+0x20>
 6de:	e0 95       	com	r30
 6e0:	0b 2e       	mov	r0, r27
 6e2:	ba 2f       	mov	r27, r26
 6e4:	a0 2d       	mov	r26, r0
 6e6:	0b 01       	movw	r0, r22
 6e8:	b9 01       	movw	r22, r18
 6ea:	90 01       	movw	r18, r0
 6ec:	0c 01       	movw	r0, r24
 6ee:	ca 01       	movw	r24, r20
 6f0:	a0 01       	movw	r20, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	ff 27       	eor	r31, r31
 6f6:	59 1b       	sub	r21, r25
 6f8:	99 f0       	breq	.+38     	; 0x720 <__addsf3x+0x60>
 6fa:	59 3f       	cpi	r21, 0xF9	; 249
 6fc:	50 f4       	brcc	.+20     	; 0x712 <__addsf3x+0x52>
 6fe:	50 3e       	cpi	r21, 0xE0	; 224
 700:	68 f1       	brcs	.+90     	; 0x75c <__addsf3x+0x9c>
 702:	1a 16       	cp	r1, r26
 704:	f0 40       	sbci	r31, 0x00	; 0
 706:	a2 2f       	mov	r26, r18
 708:	23 2f       	mov	r18, r19
 70a:	34 2f       	mov	r19, r20
 70c:	44 27       	eor	r20, r20
 70e:	58 5f       	subi	r21, 0xF8	; 248
 710:	f3 cf       	rjmp	.-26     	; 0x6f8 <__addsf3x+0x38>
 712:	46 95       	lsr	r20
 714:	37 95       	ror	r19
 716:	27 95       	ror	r18
 718:	a7 95       	ror	r26
 71a:	f0 40       	sbci	r31, 0x00	; 0
 71c:	53 95       	inc	r21
 71e:	c9 f7       	brne	.-14     	; 0x712 <__addsf3x+0x52>
 720:	7e f4       	brtc	.+30     	; 0x740 <__addsf3x+0x80>
 722:	1f 16       	cp	r1, r31
 724:	ba 0b       	sbc	r27, r26
 726:	62 0b       	sbc	r22, r18
 728:	73 0b       	sbc	r23, r19
 72a:	84 0b       	sbc	r24, r20
 72c:	ba f0       	brmi	.+46     	; 0x75c <__addsf3x+0x9c>
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	a1 f0       	breq	.+40     	; 0x75a <__addsf3x+0x9a>
 732:	ff 0f       	add	r31, r31
 734:	bb 1f       	adc	r27, r27
 736:	66 1f       	adc	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	c2 f7       	brpl	.-16     	; 0x72e <__addsf3x+0x6e>
 73e:	0e c0       	rjmp	.+28     	; 0x75c <__addsf3x+0x9c>
 740:	ba 0f       	add	r27, r26
 742:	62 1f       	adc	r22, r18
 744:	73 1f       	adc	r23, r19
 746:	84 1f       	adc	r24, r20
 748:	48 f4       	brcc	.+18     	; 0x75c <__addsf3x+0x9c>
 74a:	87 95       	ror	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	9e 3f       	cpi	r25, 0xFE	; 254
 756:	08 f0       	brcs	.+2      	; 0x75a <__addsf3x+0x9a>
 758:	b0 cf       	rjmp	.-160    	; 0x6ba <__addsf3+0x28>
 75a:	93 95       	inc	r25
 75c:	88 0f       	add	r24, r24
 75e:	08 f0       	brcs	.+2      	; 0x762 <__addsf3x+0xa2>
 760:	99 27       	eor	r25, r25
 762:	ee 0f       	add	r30, r30
 764:	97 95       	ror	r25
 766:	87 95       	ror	r24
 768:	08 95       	ret

0000076a <__cmpsf2>:
 76a:	0e 94 98 04 	call	0x930	; 0x930 <__fp_cmp>
 76e:	08 f4       	brcc	.+2      	; 0x772 <__cmpsf2+0x8>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	08 95       	ret

00000774 <__divsf3>:
 774:	0e 94 ce 03 	call	0x79c	; 0x79c <__divsf3x>
 778:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__fp_round>
 77c:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_pscB>
 780:	58 f0       	brcs	.+22     	; 0x798 <__divsf3+0x24>
 782:	0e 94 c5 04 	call	0x98a	; 0x98a <__fp_pscA>
 786:	40 f0       	brcs	.+16     	; 0x798 <__divsf3+0x24>
 788:	29 f4       	brne	.+10     	; 0x794 <__divsf3+0x20>
 78a:	5f 3f       	cpi	r21, 0xFF	; 255
 78c:	29 f0       	breq	.+10     	; 0x798 <__divsf3+0x24>
 78e:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_inf>
 792:	51 11       	cpse	r21, r1
 794:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>
 798:	0c 94 c2 04 	jmp	0x984	; 0x984 <__fp_nan>

0000079c <__divsf3x>:
 79c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <__fp_split3>
 7a0:	68 f3       	brcs	.-38     	; 0x77c <__divsf3+0x8>

000007a2 <__divsf3_pse>:
 7a2:	99 23       	and	r25, r25
 7a4:	b1 f3       	breq	.-20     	; 0x792 <__divsf3+0x1e>
 7a6:	55 23       	and	r21, r21
 7a8:	91 f3       	breq	.-28     	; 0x78e <__divsf3+0x1a>
 7aa:	95 1b       	sub	r25, r21
 7ac:	55 0b       	sbc	r21, r21
 7ae:	bb 27       	eor	r27, r27
 7b0:	aa 27       	eor	r26, r26
 7b2:	62 17       	cp	r22, r18
 7b4:	73 07       	cpc	r23, r19
 7b6:	84 07       	cpc	r24, r20
 7b8:	38 f0       	brcs	.+14     	; 0x7c8 <__divsf3_pse+0x26>
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	5f 4f       	sbci	r21, 0xFF	; 255
 7be:	22 0f       	add	r18, r18
 7c0:	33 1f       	adc	r19, r19
 7c2:	44 1f       	adc	r20, r20
 7c4:	aa 1f       	adc	r26, r26
 7c6:	a9 f3       	breq	.-22     	; 0x7b2 <__divsf3_pse+0x10>
 7c8:	35 d0       	rcall	.+106    	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7ca:	0e 2e       	mov	r0, r30
 7cc:	3a f0       	brmi	.+14     	; 0x7dc <__divsf3_pse+0x3a>
 7ce:	e0 e8       	ldi	r30, 0x80	; 128
 7d0:	32 d0       	rcall	.+100    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7d2:	91 50       	subi	r25, 0x01	; 1
 7d4:	50 40       	sbci	r21, 0x00	; 0
 7d6:	e6 95       	lsr	r30
 7d8:	00 1c       	adc	r0, r0
 7da:	ca f7       	brpl	.-14     	; 0x7ce <__divsf3_pse+0x2c>
 7dc:	2b d0       	rcall	.+86     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7de:	fe 2f       	mov	r31, r30
 7e0:	29 d0       	rcall	.+82     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 7e2:	66 0f       	add	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	bb 1f       	adc	r27, r27
 7ea:	26 17       	cp	r18, r22
 7ec:	37 07       	cpc	r19, r23
 7ee:	48 07       	cpc	r20, r24
 7f0:	ab 07       	cpc	r26, r27
 7f2:	b0 e8       	ldi	r27, 0x80	; 128
 7f4:	09 f0       	breq	.+2      	; 0x7f8 <__divsf3_pse+0x56>
 7f6:	bb 0b       	sbc	r27, r27
 7f8:	80 2d       	mov	r24, r0
 7fa:	bf 01       	movw	r22, r30
 7fc:	ff 27       	eor	r31, r31
 7fe:	93 58       	subi	r25, 0x83	; 131
 800:	5f 4f       	sbci	r21, 0xFF	; 255
 802:	3a f0       	brmi	.+14     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 804:	9e 3f       	cpi	r25, 0xFE	; 254
 806:	51 05       	cpc	r21, r1
 808:	78 f0       	brcs	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80a:	0c 94 bc 04 	jmp	0x978	; 0x978 <__fp_inf>
 80e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__fp_szero>
 812:	5f 3f       	cpi	r21, 0xFF	; 255
 814:	e4 f3       	brlt	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 816:	98 3e       	cpi	r25, 0xE8	; 232
 818:	d4 f3       	brlt	.-12     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 81a:	86 95       	lsr	r24
 81c:	77 95       	ror	r23
 81e:	67 95       	ror	r22
 820:	b7 95       	ror	r27
 822:	f7 95       	ror	r31
 824:	9f 5f       	subi	r25, 0xFF	; 255
 826:	c9 f7       	brne	.-14     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 828:	88 0f       	add	r24, r24
 82a:	91 1d       	adc	r25, r1
 82c:	96 95       	lsr	r25
 82e:	87 95       	ror	r24
 830:	97 f9       	bld	r25, 7
 832:	08 95       	ret
 834:	e1 e0       	ldi	r30, 0x01	; 1
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	bb 1f       	adc	r27, r27
 83e:	62 17       	cp	r22, r18
 840:	73 07       	cpc	r23, r19
 842:	84 07       	cpc	r24, r20
 844:	ba 07       	cpc	r27, r26
 846:	20 f0       	brcs	.+8      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 848:	62 1b       	sub	r22, r18
 84a:	73 0b       	sbc	r23, r19
 84c:	84 0b       	sbc	r24, r20
 84e:	ba 0b       	sbc	r27, r26
 850:	ee 1f       	adc	r30, r30
 852:	88 f7       	brcc	.-30     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 854:	e0 95       	com	r30
 856:	08 95       	ret

00000858 <__fixunssfsi>:
 858:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_splitA>
 85c:	88 f0       	brcs	.+34     	; 0x880 <__stack+0x21>
 85e:	9f 57       	subi	r25, 0x7F	; 127
 860:	98 f0       	brcs	.+38     	; 0x888 <__stack+0x29>
 862:	b9 2f       	mov	r27, r25
 864:	99 27       	eor	r25, r25
 866:	b7 51       	subi	r27, 0x17	; 23
 868:	b0 f0       	brcs	.+44     	; 0x896 <__stack+0x37>
 86a:	e1 f0       	breq	.+56     	; 0x8a4 <__stack+0x45>
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	99 1f       	adc	r25, r25
 874:	1a f0       	brmi	.+6      	; 0x87c <__stack+0x1d>
 876:	ba 95       	dec	r27
 878:	c9 f7       	brne	.-14     	; 0x86c <__stack+0xd>
 87a:	14 c0       	rjmp	.+40     	; 0x8a4 <__stack+0x45>
 87c:	b1 30       	cpi	r27, 0x01	; 1
 87e:	91 f0       	breq	.+36     	; 0x8a4 <__stack+0x45>
 880:	0e 94 06 05 	call	0xa0c	; 0xa0c <__fp_zero>
 884:	b1 e0       	ldi	r27, 0x01	; 1
 886:	08 95       	ret
 888:	0c 94 06 05 	jmp	0xa0c	; 0xa0c <__fp_zero>
 88c:	67 2f       	mov	r22, r23
 88e:	78 2f       	mov	r23, r24
 890:	88 27       	eor	r24, r24
 892:	b8 5f       	subi	r27, 0xF8	; 248
 894:	39 f0       	breq	.+14     	; 0x8a4 <__stack+0x45>
 896:	b9 3f       	cpi	r27, 0xF9	; 249
 898:	cc f3       	brlt	.-14     	; 0x88c <__stack+0x2d>
 89a:	86 95       	lsr	r24
 89c:	77 95       	ror	r23
 89e:	67 95       	ror	r22
 8a0:	b3 95       	inc	r27
 8a2:	d9 f7       	brne	.-10     	; 0x89a <__stack+0x3b>
 8a4:	3e f4       	brtc	.+14     	; 0x8b4 <__stack+0x55>
 8a6:	90 95       	com	r25
 8a8:	80 95       	com	r24
 8aa:	70 95       	com	r23
 8ac:	61 95       	neg	r22
 8ae:	7f 4f       	sbci	r23, 0xFF	; 255
 8b0:	8f 4f       	sbci	r24, 0xFF	; 255
 8b2:	9f 4f       	sbci	r25, 0xFF	; 255
 8b4:	08 95       	ret

000008b6 <__floatunsisf>:
 8b6:	e8 94       	clt
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <__floatsisf+0x12>

000008ba <__floatsisf>:
 8ba:	97 fb       	bst	r25, 7
 8bc:	3e f4       	brtc	.+14     	; 0x8cc <__floatsisf+0x12>
 8be:	90 95       	com	r25
 8c0:	80 95       	com	r24
 8c2:	70 95       	com	r23
 8c4:	61 95       	neg	r22
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	99 23       	and	r25, r25
 8ce:	a9 f0       	breq	.+42     	; 0x8fa <__floatsisf+0x40>
 8d0:	f9 2f       	mov	r31, r25
 8d2:	96 e9       	ldi	r25, 0x96	; 150
 8d4:	bb 27       	eor	r27, r27
 8d6:	93 95       	inc	r25
 8d8:	f6 95       	lsr	r31
 8da:	87 95       	ror	r24
 8dc:	77 95       	ror	r23
 8de:	67 95       	ror	r22
 8e0:	b7 95       	ror	r27
 8e2:	f1 11       	cpse	r31, r1
 8e4:	f8 cf       	rjmp	.-16     	; 0x8d6 <__floatsisf+0x1c>
 8e6:	fa f4       	brpl	.+62     	; 0x926 <__floatsisf+0x6c>
 8e8:	bb 0f       	add	r27, r27
 8ea:	11 f4       	brne	.+4      	; 0x8f0 <__floatsisf+0x36>
 8ec:	60 ff       	sbrs	r22, 0
 8ee:	1b c0       	rjmp	.+54     	; 0x926 <__floatsisf+0x6c>
 8f0:	6f 5f       	subi	r22, 0xFF	; 255
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	16 c0       	rjmp	.+44     	; 0x926 <__floatsisf+0x6c>
 8fa:	88 23       	and	r24, r24
 8fc:	11 f0       	breq	.+4      	; 0x902 <__floatsisf+0x48>
 8fe:	96 e9       	ldi	r25, 0x96	; 150
 900:	11 c0       	rjmp	.+34     	; 0x924 <__floatsisf+0x6a>
 902:	77 23       	and	r23, r23
 904:	21 f0       	breq	.+8      	; 0x90e <__floatsisf+0x54>
 906:	9e e8       	ldi	r25, 0x8E	; 142
 908:	87 2f       	mov	r24, r23
 90a:	76 2f       	mov	r23, r22
 90c:	05 c0       	rjmp	.+10     	; 0x918 <__floatsisf+0x5e>
 90e:	66 23       	and	r22, r22
 910:	71 f0       	breq	.+28     	; 0x92e <__floatsisf+0x74>
 912:	96 e8       	ldi	r25, 0x86	; 134
 914:	86 2f       	mov	r24, r22
 916:	70 e0       	ldi	r23, 0x00	; 0
 918:	60 e0       	ldi	r22, 0x00	; 0
 91a:	2a f0       	brmi	.+10     	; 0x926 <__floatsisf+0x6c>
 91c:	9a 95       	dec	r25
 91e:	66 0f       	add	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	da f7       	brpl	.-10     	; 0x91c <__floatsisf+0x62>
 926:	88 0f       	add	r24, r24
 928:	96 95       	lsr	r25
 92a:	87 95       	ror	r24
 92c:	97 f9       	bld	r25, 7
 92e:	08 95       	ret

00000930 <__fp_cmp>:
 930:	99 0f       	add	r25, r25
 932:	00 08       	sbc	r0, r0
 934:	55 0f       	add	r21, r21
 936:	aa 0b       	sbc	r26, r26
 938:	e0 e8       	ldi	r30, 0x80	; 128
 93a:	fe ef       	ldi	r31, 0xFE	; 254
 93c:	16 16       	cp	r1, r22
 93e:	17 06       	cpc	r1, r23
 940:	e8 07       	cpc	r30, r24
 942:	f9 07       	cpc	r31, r25
 944:	c0 f0       	brcs	.+48     	; 0x976 <__fp_cmp+0x46>
 946:	12 16       	cp	r1, r18
 948:	13 06       	cpc	r1, r19
 94a:	e4 07       	cpc	r30, r20
 94c:	f5 07       	cpc	r31, r21
 94e:	98 f0       	brcs	.+38     	; 0x976 <__fp_cmp+0x46>
 950:	62 1b       	sub	r22, r18
 952:	73 0b       	sbc	r23, r19
 954:	84 0b       	sbc	r24, r20
 956:	95 0b       	sbc	r25, r21
 958:	39 f4       	brne	.+14     	; 0x968 <__fp_cmp+0x38>
 95a:	0a 26       	eor	r0, r26
 95c:	61 f0       	breq	.+24     	; 0x976 <__fp_cmp+0x46>
 95e:	23 2b       	or	r18, r19
 960:	24 2b       	or	r18, r20
 962:	25 2b       	or	r18, r21
 964:	21 f4       	brne	.+8      	; 0x96e <__fp_cmp+0x3e>
 966:	08 95       	ret
 968:	0a 26       	eor	r0, r26
 96a:	09 f4       	brne	.+2      	; 0x96e <__fp_cmp+0x3e>
 96c:	a1 40       	sbci	r26, 0x01	; 1
 96e:	a6 95       	lsr	r26
 970:	8f ef       	ldi	r24, 0xFF	; 255
 972:	81 1d       	adc	r24, r1
 974:	81 1d       	adc	r24, r1
 976:	08 95       	ret

00000978 <__fp_inf>:
 978:	97 f9       	bld	r25, 7
 97a:	9f 67       	ori	r25, 0x7F	; 127
 97c:	80 e8       	ldi	r24, 0x80	; 128
 97e:	70 e0       	ldi	r23, 0x00	; 0
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	08 95       	ret

00000984 <__fp_nan>:
 984:	9f ef       	ldi	r25, 0xFF	; 255
 986:	80 ec       	ldi	r24, 0xC0	; 192
 988:	08 95       	ret

0000098a <__fp_pscA>:
 98a:	00 24       	eor	r0, r0
 98c:	0a 94       	dec	r0
 98e:	16 16       	cp	r1, r22
 990:	17 06       	cpc	r1, r23
 992:	18 06       	cpc	r1, r24
 994:	09 06       	cpc	r0, r25
 996:	08 95       	ret

00000998 <__fp_pscB>:
 998:	00 24       	eor	r0, r0
 99a:	0a 94       	dec	r0
 99c:	12 16       	cp	r1, r18
 99e:	13 06       	cpc	r1, r19
 9a0:	14 06       	cpc	r1, r20
 9a2:	05 06       	cpc	r0, r21
 9a4:	08 95       	ret

000009a6 <__fp_round>:
 9a6:	09 2e       	mov	r0, r25
 9a8:	03 94       	inc	r0
 9aa:	00 0c       	add	r0, r0
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <__fp_round+0xc>
 9ae:	88 23       	and	r24, r24
 9b0:	52 f0       	brmi	.+20     	; 0x9c6 <__fp_round+0x20>
 9b2:	bb 0f       	add	r27, r27
 9b4:	40 f4       	brcc	.+16     	; 0x9c6 <__fp_round+0x20>
 9b6:	bf 2b       	or	r27, r31
 9b8:	11 f4       	brne	.+4      	; 0x9be <__fp_round+0x18>
 9ba:	60 ff       	sbrs	r22, 0
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__fp_round+0x20>
 9be:	6f 5f       	subi	r22, 0xFF	; 255
 9c0:	7f 4f       	sbci	r23, 0xFF	; 255
 9c2:	8f 4f       	sbci	r24, 0xFF	; 255
 9c4:	9f 4f       	sbci	r25, 0xFF	; 255
 9c6:	08 95       	ret

000009c8 <__fp_split3>:
 9c8:	57 fd       	sbrc	r21, 7
 9ca:	90 58       	subi	r25, 0x80	; 128
 9cc:	44 0f       	add	r20, r20
 9ce:	55 1f       	adc	r21, r21
 9d0:	59 f0       	breq	.+22     	; 0x9e8 <__fp_splitA+0x10>
 9d2:	5f 3f       	cpi	r21, 0xFF	; 255
 9d4:	71 f0       	breq	.+28     	; 0x9f2 <__fp_splitA+0x1a>
 9d6:	47 95       	ror	r20

000009d8 <__fp_splitA>:
 9d8:	88 0f       	add	r24, r24
 9da:	97 fb       	bst	r25, 7
 9dc:	99 1f       	adc	r25, r25
 9de:	61 f0       	breq	.+24     	; 0x9f8 <__fp_splitA+0x20>
 9e0:	9f 3f       	cpi	r25, 0xFF	; 255
 9e2:	79 f0       	breq	.+30     	; 0xa02 <__fp_splitA+0x2a>
 9e4:	87 95       	ror	r24
 9e6:	08 95       	ret
 9e8:	12 16       	cp	r1, r18
 9ea:	13 06       	cpc	r1, r19
 9ec:	14 06       	cpc	r1, r20
 9ee:	55 1f       	adc	r21, r21
 9f0:	f2 cf       	rjmp	.-28     	; 0x9d6 <__fp_split3+0xe>
 9f2:	46 95       	lsr	r20
 9f4:	f1 df       	rcall	.-30     	; 0x9d8 <__fp_splitA>
 9f6:	08 c0       	rjmp	.+16     	; 0xa08 <__fp_splitA+0x30>
 9f8:	16 16       	cp	r1, r22
 9fa:	17 06       	cpc	r1, r23
 9fc:	18 06       	cpc	r1, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	f1 cf       	rjmp	.-30     	; 0x9e4 <__fp_splitA+0xc>
 a02:	86 95       	lsr	r24
 a04:	71 05       	cpc	r23, r1
 a06:	61 05       	cpc	r22, r1
 a08:	08 94       	sec
 a0a:	08 95       	ret

00000a0c <__fp_zero>:
 a0c:	e8 94       	clt

00000a0e <__fp_szero>:
 a0e:	bb 27       	eor	r27, r27
 a10:	66 27       	eor	r22, r22
 a12:	77 27       	eor	r23, r23
 a14:	cb 01       	movw	r24, r22
 a16:	97 f9       	bld	r25, 7
 a18:	08 95       	ret

00000a1a <_exit>:
 a1a:	f8 94       	cli

00000a1c <__stop_program>:
 a1c:	ff cf       	rjmp	.-2      	; 0xa1c <__stop_program>
