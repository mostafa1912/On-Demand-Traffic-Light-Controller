
Traffic Light Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a6c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000a6c  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001485  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085b  00000000  00000000  000020fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b55  00000000  00000000  00002958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000228  00000000  00000000  000034b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050d  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000723  00000000  00000000  00003be5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004308  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 00 02 	call	0x400	; 0x400 <main>
  7a:	0c 94 34 05 	jmp	0xa68	; 0xa68 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <appInit>:
#include "../MCAL/Interrupt driver/Interrupts.h"
#include "../EUCAL/LED driver/LED.h"

void appInit(){
//initializing LEDs
LED_init(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
  82:	60 e0       	ldi	r22, 0x00	; 0
  84:	81 e4       	ldi	r24, 0x41	; 65
  86:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LED_init>
LED_init(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	81 e4       	ldi	r24, 0x41	; 65
  8e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LED_init>
LED_init(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LED_init>

LED_init(LED_PED_PORT,LED_PED_PORT_R_PIN);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	82 e4       	ldi	r24, 0x42	; 66
  9e:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LED_init>
LED_init(LED_PED_PORT,LED_PED_PORT_Y_PIN);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	82 e4       	ldi	r24, 0x42	; 66
  a6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LED_init>
LED_init(LED_PED_PORT,LED_PED_PORT_G_PIN);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LED_init>

//initialize timer to normal mode
TIMER_init();
  b2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <TIMER_init>

//initialize button
BUTTON_init(BUTTON_PORT,BUTTON_PIN);
  b6:	62 e0       	ldi	r22, 0x02	; 2
  b8:	84 e4       	ldi	r24, 0x44	; 68
  ba:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <BUTTON_init>
  be:	08 95       	ret

000000c0 <blinkYellow>:

}

EN_carColor_t carColor = GREEN;
void blinkYellow()
{
  c0:	cf 93       	push	r28
	for (uint8_t i = 0; i < 5;i++)
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <blinkYellow+0x38>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  c6:	61 e0       	ldi	r22, 0x01	; 1
  c8:	81 e4       	ldi	r24, 0x41	; 65
  ca:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
		LED_on(LED_PED_PORT,LED_PED_PORT_Y_PIN);
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
		TIMER_delay(500);
  d6:	84 ef       	ldi	r24, 0xF4	; 244
  d8:	91 e0       	ldi	r25, 0x01	; 1
  da:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	81 e4       	ldi	r24, 0x41	; 65
  e2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
		LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	82 e4       	ldi	r24, 0x42	; 66
  ea:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
		TIMER_delay(500);
  ee:	84 ef       	ldi	r24, 0xF4	; 244
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
}

EN_carColor_t carColor = GREEN;
void blinkYellow()
{
	for (uint8_t i = 0; i < 5;i++)
  f6:	cf 5f       	subi	r28, 0xFF	; 255
  f8:	c5 30       	cpi	r28, 0x05	; 5
  fa:	28 f3       	brcs	.-54     	; 0xc6 <blinkYellow+0x6>
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
		TIMER_delay(500);
	}
}
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <normalMode>:

void normalMode()
{
 100:	cf 93       	push	r28
	DIO_write(PORT_D,PIN0,HI);
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	84 e4       	ldi	r24, 0x44	; 68
 108:	0e 94 81 02 	call	0x502	; 0x502 <DIO_write>
	//turn all LEDs off to clear whatever was done in pedestrian mode (if coming from there)
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	81 e4       	ldi	r24, 0x41	; 65
 110:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	81 e4       	ldi	r24, 0x41	; 65
 118:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	81 e4       	ldi	r24, 0x41	; 65
 120:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	
	LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN);
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	82 e4       	ldi	r24, 0x42	; 66
 128:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	LED_off(LED_PED_PORT,LED_PED_PORT_Y_PIN);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	
	
	//1.car green on & pedestrian red on for 5 seconds
	LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	81 e4       	ldi	r24, 0x41	; 65
 140:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
	LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	82 e4       	ldi	r24, 0x42	; 66
 148:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
	carColor = GREEN;	
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	TIMER_delay(5000); //delay 5 seconds
 152:	88 e8       	ldi	r24, 0x88	; 136
 154:	93 e1       	ldi	r25, 0x13	; 19
 156:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn green led off while pedestrian red still on
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	
	//car yellow light to blink for 5 seconds	
	carColor = YELLOW;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	for (uint8_t i = 0; i < 5;i++)
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	11 c0       	rjmp	.+34     	; 0x18e <normalMode+0x8e>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
		TIMER_delay(500);
 174:	84 ef       	ldi	r24, 0xF4	; 244
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
		TIMER_delay(500);
 184:	84 ef       	ldi	r24, 0xF4	; 244
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
	TIMER_delay(5000); //delay 5 seconds
	LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn green led off while pedestrian red still on
	
	//car yellow light to blink for 5 seconds	
	carColor = YELLOW;
	for (uint8_t i = 0; i < 5;i++)
 18c:	cf 5f       	subi	r28, 0xFF	; 255
 18e:	c5 30       	cpi	r28, 0x05	; 5
 190:	68 f3       	brcs	.-38     	; 0x16c <normalMode+0x6c>
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		TIMER_delay(500);
	}
	
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN); //turning off the car yellow light  -- pedestrian red still on
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	
	//card red on, pedestrian red off, pedestrian green on
	carColor = RED;
 19a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
	LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN);
 1ae:	62 e0       	ldi	r22, 0x02	; 2
 1b0:	82 e4       	ldi	r24, 0x42	; 66
 1b2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
	TIMER_delay(5000);
 1b6:	88 e8       	ldi	r24, 0x88	; 136
 1b8:	93 e1       	ldi	r25, 0x13	; 19
 1ba:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
	LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //turn car red off
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	81 e4       	ldi	r24, 0x41	; 65
 1c2:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN); //turn ped green off
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	82 e4       	ldi	r24, 0x42	; 66
 1ca:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
	LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //turn ped red on
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	82 e4       	ldi	r24, 0x42	; 66
 1d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
	
	
	//start blinking car yellow light
	carColor = YELLOW;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	for (uint8_t i = 0; i < 5;i++)
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	11 c0       	rjmp	.+34     	; 0x202 <normalMode+0x102>
	{
		LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	81 e4       	ldi	r24, 0x41	; 65
 1e4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
		TIMER_delay(500);
 1e8:	84 ef       	ldi	r24, 0xF4	; 244
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	81 e4       	ldi	r24, 0x41	; 65
 1f4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
		TIMER_delay(500);
 1f8:	84 ef       	ldi	r24, 0xF4	; 244
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
	
	
	//start blinking car yellow light
	carColor = YELLOW;
	
	for (uint8_t i = 0; i < 5;i++)
 200:	cf 5f       	subi	r28, 0xFF	; 255
 202:	c5 30       	cpi	r28, 0x05	; 5
 204:	68 f3       	brcs	.-38     	; 0x1e0 <normalMode+0xe0>
		TIMER_delay(500);
		LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
		TIMER_delay(500);
	}
	
	LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 206:	61 e0       	ldi	r22, 0x01	; 1
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>

}
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <pedestrianMode>:



void pedestrianMode()
{
 212:	cf 93       	push	r28
	switch(carColor)
 214:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	09 f4       	brne	.+2      	; 0x21e <pedestrianMode+0xc>
 21c:	45 c0       	rjmp	.+138    	; 0x2a8 <pedestrianMode+0x96>
 21e:	20 f0       	brcs	.+8      	; 0x228 <pedestrianMode+0x16>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	09 f4       	brne	.+2      	; 0x226 <pedestrianMode+0x14>
 224:	83 c0       	rjmp	.+262    	; 0x32c <pedestrianMode+0x11a>
 226:	ae c0       	rjmp	.+348    	; 0x384 <pedestrianMode+0x172>
	{		
		
		
		case RED :
			//car red on and ped green on for 5 seconds
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN);		
 230:	62 e0       	ldi	r22, 0x02	; 2
 232:	82 e4       	ldi	r24, 0x42	; 66
 234:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			TIMER_delay(5000);	
 238:	88 e8       	ldi	r24, 0x88	; 136
 23a:	93 e1       	ldi	r25, 0x13	; 19
 23c:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
				continue as if in normal mode to complete the cycle since the ISR returns to the
				place it came from.
			*/
			
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			//while green still on for pedestrians
			for (uint8_t i = 0; i < 5;i++)
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	11 c0       	rjmp	.+34     	; 0x26e <pedestrianMode+0x5c>
			{
				LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e4       	ldi	r24, 0x41	; 65
 250:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
				TIMER_delay(500);
 254:	84 ef       	ldi	r24, 0xF4	; 244
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
				LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e4       	ldi	r24, 0x41	; 65
 260:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
				TIMER_delay(500);
 264:	84 ef       	ldi	r24, 0xF4	; 244
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
			*/
			
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
			//while green still on for pedestrians
			for (uint8_t i = 0; i < 5;i++)
 26c:	cf 5f       	subi	r28, 0xFF	; 255
 26e:	c5 30       	cpi	r28, 0x05	; 5
 270:	68 f3       	brcs	.-38     	; 0x24c <pedestrianMode+0x3a>
				LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
				TIMER_delay(500);
			} 
			
			//turn off ped green and turn on ped red and car green
			LED_off(LED_PED_PORT,LED_CAR_PORT_G_PIN);
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	82 e4       	ldi	r24, 0x42	; 66
 276:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			LED_on(LED_PED_PORT,LED_CAR_PORT_R_PIN);//ped red on
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	82 e4       	ldi	r24, 0x42	; 66
 27e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green	
 282:	62 e0       	ldi	r22, 0x02	; 2
 284:	81 e4       	ldi	r24, 0x41	; 65
 286:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			TIMER_delay(5000);
 28a:	88 e8       	ldi	r24, 0x88	; 136
 28c:	93 e1       	ldi	r25, 0x13	; 19
 28e:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //turn off car green 
 292:	62 e0       	ldi	r22, 0x02	; 2
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			blinkYellow(); //blink both yellow
 29a:	0e 94 60 00 	call	0xc0	; 0xc0 <blinkYellow>
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN);//turn on car red and back to normal mode
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e4       	ldi	r24, 0x41	; 65
 2a2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			//LED_off(LED_PED_PORT,LED_CAR_PORT_R_PIN);
			
			
			break;
 2a6:	6e c0       	rjmp	.+220    	; 0x384 <pedestrianMode+0x172>
		
		case YELLOW:
			//1.both yellow blink for 5 seconds
			blinkYellow();
 2a8:	0e 94 60 00 	call	0xc0	; 0xc0 <blinkYellow>
		
		
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //car red on
 2ac:	60 e0       	ldi	r22, 0x00	; 0
 2ae:	81 e4       	ldi	r24, 0x41	; 65
 2b0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green on	
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	82 e4       	ldi	r24, 0x42	; 66
 2b8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN);	
 2bc:	60 e0       	ldi	r22, 0x00	; 0
 2be:	82 e4       	ldi	r24, 0x42	; 66
 2c0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			TIMER_delay(5000);
 2c4:	88 e8       	ldi	r24, 0x88	; 136
 2c6:	93 e1       	ldi	r25, 0x13	; 19
 2c8:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	81 e4       	ldi	r24, 0x41	; 65
 2d0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			blinkYellow();
 2d4:	0e 94 60 00 	call	0xc0	; 0xc0 <blinkYellow>
		
			LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green off
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	82 e4       	ldi	r24, 0x42	; 66
 2dc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green on
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red on
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	82 e4       	ldi	r24, 0x42	; 66
 2ec:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			TIMER_delay(5000);
 2f0:	88 e8       	ldi	r24, 0x88	; 136
 2f2:	93 e1       	ldi	r25, 0x13	; 19
 2f4:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
 2f8:	62 e0       	ldi	r22, 0x02	; 2
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			
			for (uint8_t i = 0; i < 5;i++)
 300:	c0 e0       	ldi	r28, 0x00	; 0
 302:	11 c0       	rjmp	.+34     	; 0x326 <pedestrianMode+0x114>
			{
				LED_on(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	81 e4       	ldi	r24, 0x41	; 65
 308:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
				TIMER_delay(500);
 30c:	84 ef       	ldi	r24, 0xF4	; 244
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
				LED_off(LED_CAR_PORT,LED_CAR_PORT_Y_PIN);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	81 e4       	ldi	r24, 0x41	; 65
 318:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
				TIMER_delay(500);
 31c:	84 ef       	ldi	r24, 0xF4	; 244
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
			LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red on
			TIMER_delay(5000);
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN);
			
			for (uint8_t i = 0; i < 5;i++)
 324:	cf 5f       	subi	r28, 0xFF	; 255
 326:	c5 30       	cpi	r28, 0x05	; 5
 328:	68 f3       	brcs	.-38     	; 0x304 <pedestrianMode+0xf2>
 32a:	2c c0       	rjmp	.+88     	; 0x384 <pedestrianMode+0x172>
			}
			
			break;
			
		case GREEN:
			blinkYellow();
 32c:	0e 94 60 00 	call	0xc0	; 0xc0 <blinkYellow>
			
			LED_on(LED_CAR_PORT,LED_CAR_PORT_R_PIN); //car red on
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	81 e4       	ldi	r24, 0x41	; 65
 334:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			LED_off(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green off
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	81 e4       	ldi	r24, 0x41	; 65
 33c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			
			LED_on(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green on
 340:	62 e0       	ldi	r22, 0x02	; 2
 342:	82 e4       	ldi	r24, 0x42	; 66
 344:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			LED_off(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red off
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	82 e4       	ldi	r24, 0x42	; 66
 34c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			TIMER_delay(5000);
 350:	88 e8       	ldi	r24, 0x88	; 136
 352:	93 e1       	ldi	r25, 0x13	; 19
 354:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
			
			LED_off(LED_CAR_PORT,LED_CAR_PORT_R_PIN);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	81 e4       	ldi	r24, 0x41	; 65
 35c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			blinkYellow();
 360:	0e 94 60 00 	call	0xc0	; 0xc0 <blinkYellow>
			
			LED_off(LED_PED_PORT,LED_PED_PORT_G_PIN); //ped green off
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	82 e4       	ldi	r24, 0x42	; 66
 368:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LED_off>
			LED_on(LED_PED_PORT,LED_PED_PORT_R_PIN); //ped red on
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	82 e4       	ldi	r24, 0x42	; 66
 370:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			
			LED_on(LED_CAR_PORT,LED_CAR_PORT_G_PIN); //car green on
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	81 e4       	ldi	r24, 0x41	; 65
 378:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED_on>
			
			TIMER_delay(5000);
 37c:	88 e8       	ldi	r24, 0x88	; 136
 37e:	93 e1       	ldi	r25, 0x13	; 19
 380:	0e 94 03 03 	call	0x606	; 0x606 <TIMER_delay>
			break;
		
	}
	
	
}
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <appStart>:

void appStart()
{	
	while(1)
	{
		normalMode();			
 388:	0e 94 80 00 	call	0x100	; 0x100 <normalMode>
 38c:	fd cf       	rjmp	.-6      	; 0x388 <appStart>

0000038e <__vector_1>:
	}
	
}


ISR(EXT_INT_0){
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	//cli();
	pedestrianMode();
 3b0:	0e 94 09 01 	call	0x212	; 0x212 <pedestrianMode>
	//GIFR |= (1<<6); done automatically
	//sei();		
	
 3b4:	ff 91       	pop	r31
 3b6:	ef 91       	pop	r30
 3b8:	bf 91       	pop	r27
 3ba:	af 91       	pop	r26
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	7f 91       	pop	r23
 3c2:	6f 91       	pop	r22
 3c4:	5f 91       	pop	r21
 3c6:	4f 91       	pop	r20
 3c8:	3f 91       	pop	r19
 3ca:	2f 91       	pop	r18
 3cc:	0f 90       	pop	r0
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	0f 90       	pop	r0
 3d2:	1f 90       	pop	r1
 3d4:	18 95       	reti

000003d6 <BUTTON_init>:
#include "Button.h"


void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
		DIO_init(BUTTON_PORT,BUTTON_PIN,IN);
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	84 e4       	ldi	r24, 0x44	; 68
 3dc:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_init>
		GICR |= (1<<6); //enabling external interrupt 0
 3e0:	8b b7       	in	r24, 0x3b	; 59
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	8b bf       	out	0x3b, r24	; 59
 3e6:	08 95       	ret

000003e8 <LED_init>:
#include "LED.h"


void LED_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUT);	
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	0e 94 07 02 	call	0x40e	; 0x40e <DIO_init>
 3ee:	08 95       	ret

000003f0 <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,HI);
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	0e 94 81 02 	call	0x502	; 0x502 <DIO_write>
 3f6:	08 95       	ret

000003f8 <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LO);
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	0e 94 81 02 	call	0x502	; 0x502 <DIO_write>
 3fe:	08 95       	ret

00000400 <main>:
#include "Application/Application.h"

 int main(void)
 {
 
 	appInit();
 400:	0e 94 41 00 	call	0x82	; 0x82 <appInit>
 	
 	appStart();
 404:	0e 94 c4 01 	call	0x388	; 0x388 <appStart>
 	
 }
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	08 95       	ret

0000040e <DIO_init>:
#include "DIO.h"


void DIO_init(uint8_t portName, uint8_t pinNumber,uint8_t direction) //sets the wanted pin on the atmega 32 as either input or output by modifying the registers
{
	switch (portName){
 40e:	82 34       	cpi	r24, 0x42	; 66
 410:	31 f1       	breq	.+76     	; 0x45e <DIO_init+0x50>
 412:	18 f4       	brcc	.+6      	; 0x41a <DIO_init+0xc>
 414:	81 34       	cpi	r24, 0x41	; 65
 416:	39 f0       	breq	.+14     	; 0x426 <DIO_init+0x18>
 418:	08 95       	ret
 41a:	83 34       	cpi	r24, 0x43	; 67
 41c:	e1 f1       	breq	.+120    	; 0x496 <DIO_init+0x88>
 41e:	84 34       	cpi	r24, 0x44	; 68
 420:	09 f4       	brne	.+2      	; 0x424 <DIO_init+0x16>
 422:	54 c0       	rjmp	.+168    	; 0x4cc <DIO_init+0xbe>
 424:	08 95       	ret
		case PORT_A:
			if (direction == IN)
 426:	41 11       	cpse	r20, r1
 428:	0c c0       	rjmp	.+24     	; 0x442 <DIO_init+0x34>
			{
				DDRA &= ~(1<<pinNumber);
 42a:	2a b3       	in	r18, 0x1a	; 26
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_init+0x28>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_init+0x24>
 43a:	80 95       	com	r24
 43c:	82 23       	and	r24, r18
 43e:	8a bb       	out	0x1a, r24	; 26
 440:	08 95       	ret
			}
			else if (direction == OUT) 
 442:	41 30       	cpi	r20, 0x01	; 1
 444:	09 f0       	breq	.+2      	; 0x448 <DIO_init+0x3a>
 446:	5c c0       	rjmp	.+184    	; 0x500 <DIO_init+0xf2>
			{
				DDRA |= (1<<pinNumber);
 448:	2a b3       	in	r18, 0x1a	; 26
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <DIO_init+0x46>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <DIO_init+0x42>
 458:	82 2b       	or	r24, r18
 45a:	8a bb       	out	0x1a, r24	; 26
 45c:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_B:
			if (direction == IN)
 45e:	41 11       	cpse	r20, r1
 460:	0c c0       	rjmp	.+24     	; 0x47a <DIO_init+0x6c>
			{
				DDRB &= ~(1<<pinNumber);
 462:	27 b3       	in	r18, 0x17	; 23
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <DIO_init+0x60>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <DIO_init+0x5c>
 472:	80 95       	com	r24
 474:	82 23       	and	r24, r18
 476:	87 bb       	out	0x17, r24	; 23
 478:	08 95       	ret
			}
			else if (direction == OUT)
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	09 f0       	breq	.+2      	; 0x480 <DIO_init+0x72>
 47e:	40 c0       	rjmp	.+128    	; 0x500 <DIO_init+0xf2>
			{
				DDRB |= (1<<pinNumber);
 480:	27 b3       	in	r18, 0x17	; 23
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_init+0x7e>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_init+0x7a>
 490:	82 2b       	or	r24, r18
 492:	87 bb       	out	0x17, r24	; 23
 494:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_C:
			if (direction == IN)
 496:	41 11       	cpse	r20, r1
 498:	0c c0       	rjmp	.+24     	; 0x4b2 <DIO_init+0xa4>
			{
				DDRC &= ~(1<<pinNumber);
 49a:	24 b3       	in	r18, 0x14	; 20
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_init+0x98>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_init+0x94>
 4aa:	80 95       	com	r24
 4ac:	82 23       	and	r24, r18
 4ae:	84 bb       	out	0x14, r24	; 20
 4b0:	08 95       	ret
			}
			else if (direction == OUT)
 4b2:	41 30       	cpi	r20, 0x01	; 1
 4b4:	29 f5       	brne	.+74     	; 0x500 <DIO_init+0xf2>
			{
				DDRC |= (1<<pinNumber);
 4b6:	24 b3       	in	r18, 0x14	; 20
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_init+0xb4>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_init+0xb0>
 4c6:	82 2b       	or	r24, r18
 4c8:	84 bb       	out	0x14, r24	; 20
 4ca:	08 95       	ret
				//error handling
			}
			break;
		
		case PORT_D:
			if (direction == IN)
 4cc:	41 11       	cpse	r20, r1
 4ce:	0c c0       	rjmp	.+24     	; 0x4e8 <DIO_init+0xda>
			{
				DDRD &= ~(1<<pinNumber);
 4d0:	21 b3       	in	r18, 0x11	; 17
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_init+0xce>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_init+0xca>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	81 bb       	out	0x11, r24	; 17
 4e6:	08 95       	ret
			}
			else if (direction == OUT)
 4e8:	41 30       	cpi	r20, 0x01	; 1
 4ea:	51 f4       	brne	.+20     	; 0x500 <DIO_init+0xf2>
			{
				DDRD |= (1<<pinNumber);
 4ec:	21 b3       	in	r18, 0x11	; 17
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_init+0xea>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	6a 95       	dec	r22
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_init+0xe6>
 4fc:	82 2b       	or	r24, r18
 4fe:	81 bb       	out	0x11, r24	; 17
 500:	08 95       	ret

00000502 <DIO_write>:
			
}

void DIO_write(uint8_t portName, uint8_t pinNumber,uint8_t value)
{
	switch (portName)
 502:	82 34       	cpi	r24, 0x42	; 66
 504:	31 f1       	breq	.+76     	; 0x552 <DIO_write+0x50>
 506:	18 f4       	brcc	.+6      	; 0x50e <DIO_write+0xc>
 508:	81 34       	cpi	r24, 0x41	; 65
 50a:	39 f0       	breq	.+14     	; 0x51a <DIO_write+0x18>
 50c:	08 95       	ret
 50e:	83 34       	cpi	r24, 0x43	; 67
 510:	e1 f1       	breq	.+120    	; 0x58a <DIO_write+0x88>
 512:	84 34       	cpi	r24, 0x44	; 68
 514:	09 f4       	brne	.+2      	; 0x518 <DIO_write+0x16>
 516:	54 c0       	rjmp	.+168    	; 0x5c0 <DIO_write+0xbe>
 518:	08 95       	ret
	{
		case PORT_A:
			if (value == LO)
 51a:	41 11       	cpse	r20, r1
 51c:	0c c0       	rjmp	.+24     	; 0x536 <DIO_write+0x34>
			{	
				PORTA &= ~(1<<pinNumber);
 51e:	2b b3       	in	r18, 0x1b	; 27
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_write+0x28>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_write+0x24>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	8b bb       	out	0x1b, r24	; 27
 534:	08 95       	ret
			}
			else if(value == HI)
 536:	41 30       	cpi	r20, 0x01	; 1
 538:	09 f0       	breq	.+2      	; 0x53c <DIO_write+0x3a>
 53a:	5c c0       	rjmp	.+184    	; 0x5f4 <DIO_write+0xf2>
			{
				PORTA |= (1<<pinNumber);
 53c:	2b b3       	in	r18, 0x1b	; 27
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_write+0x46>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_write+0x42>
 54c:	82 2b       	or	r24, r18
 54e:	8b bb       	out	0x1b, r24	; 27
 550:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_B:
			if (value == LO)
 552:	41 11       	cpse	r20, r1
 554:	0c c0       	rjmp	.+24     	; 0x56e <DIO_write+0x6c>
			{
				PORTB &= ~(1<<pinNumber);
 556:	28 b3       	in	r18, 0x18	; 24
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_write+0x60>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_write+0x5c>
 566:	80 95       	com	r24
 568:	82 23       	and	r24, r18
 56a:	88 bb       	out	0x18, r24	; 24
 56c:	08 95       	ret
			}
			else if(value == HI)
 56e:	41 30       	cpi	r20, 0x01	; 1
 570:	09 f0       	breq	.+2      	; 0x574 <DIO_write+0x72>
 572:	40 c0       	rjmp	.+128    	; 0x5f4 <DIO_write+0xf2>
			{
				PORTB |= (1<<pinNumber);
 574:	28 b3       	in	r18, 0x18	; 24
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <DIO_write+0x7e>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	6a 95       	dec	r22
 582:	e2 f7       	brpl	.-8      	; 0x57c <DIO_write+0x7a>
 584:	82 2b       	or	r24, r18
 586:	88 bb       	out	0x18, r24	; 24
 588:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_C:
			if (value == LO)
 58a:	41 11       	cpse	r20, r1
 58c:	0c c0       	rjmp	.+24     	; 0x5a6 <DIO_write+0xa4>
			{
				PORTC &= ~(1<<pinNumber);
 58e:	25 b3       	in	r18, 0x15	; 21
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_write+0x98>
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_write+0x94>
 59e:	80 95       	com	r24
 5a0:	82 23       	and	r24, r18
 5a2:	85 bb       	out	0x15, r24	; 21
 5a4:	08 95       	ret
			}
			else if(value == HI)
 5a6:	41 30       	cpi	r20, 0x01	; 1
 5a8:	29 f5       	brne	.+74     	; 0x5f4 <DIO_write+0xf2>
			{
				PORTC |= (1<<pinNumber);
 5aa:	25 b3       	in	r18, 0x15	; 21
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_write+0xb4>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_write+0xb0>
 5ba:	82 2b       	or	r24, r18
 5bc:	85 bb       	out	0x15, r24	; 21
 5be:	08 95       	ret
			{
				//error handling
			}
			break;
		case PORT_D:
			if (value == LO)
 5c0:	41 11       	cpse	r20, r1
 5c2:	0c c0       	rjmp	.+24     	; 0x5dc <DIO_write+0xda>
			{
				PORTD &= ~(1<<pinNumber);
 5c4:	22 b3       	in	r18, 0x12	; 18
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_write+0xce>
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	6a 95       	dec	r22
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_write+0xca>
 5d4:	80 95       	com	r24
 5d6:	82 23       	and	r24, r18
 5d8:	82 bb       	out	0x12, r24	; 18
 5da:	08 95       	ret
			}
			else if(value == HI)
 5dc:	41 30       	cpi	r20, 0x01	; 1
 5de:	51 f4       	brne	.+20     	; 0x5f4 <DIO_write+0xf2>
			{
				PORTD |= (1<<pinNumber);
 5e0:	22 b3       	in	r18, 0x12	; 18
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_write+0xea>
 5e8:	88 0f       	add	r24, r24
 5ea:	99 1f       	adc	r25, r25
 5ec:	6a 95       	dec	r22
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_write+0xe6>
 5f0:	82 2b       	or	r24, r18
 5f2:	82 bb       	out	0x12, r24	; 18
 5f4:	08 95       	ret

000005f6 <TIMER_init>:
#define F_CPU 8000000
#define tickTime 0.032
void TIMER_init()
{
	// Set timer 0 to normal mode
	TCCR0 = 0x00;
 5f6:	13 be       	out	0x33, r1	; 51

	// Enable timer 0 overflow interrupt
	//TIMSK |= (1 << 0);

	// Enable global interrupts
	SREG |= (1<<7);
 5f8:	8f b7       	in	r24, 0x3f	; 63
 5fa:	80 68       	ori	r24, 0x80	; 128
 5fc:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<<1)|(1<<0); //setting interrupts to rising edge
 5fe:	85 b7       	in	r24, 0x35	; 53
 600:	83 60       	ori	r24, 0x03	; 3
 602:	85 bf       	out	0x35, r24	; 53
 604:	08 95       	ret

00000606 <TIMER_delay>:
}

void TIMER_delay(uint16_t millisec)
{
 606:	cf 92       	push	r12
 608:	df 92       	push	r13
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	ec 01       	movw	r28, r24
	double maxDelay;
	overflow_Counter = 0;
	maxDelay = 8.192; //max delay in ms possible with this timer configuration
	
	
	if(millisec<maxDelay)
 614:	bc 01       	movw	r22, r24
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 82 04 	call	0x904	; 0x904 <__floatunsisf>
 61e:	6b 01       	movw	r12, r22
 620:	7c 01       	movw	r14, r24
 622:	2f e6       	ldi	r18, 0x6F	; 111
 624:	32 e1       	ldi	r19, 0x12	; 18
 626:	43 e0       	ldi	r20, 0x03	; 3
 628:	51 e4       	ldi	r21, 0x41	; 65
 62a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__cmpsf2>
 62e:	88 23       	and	r24, r24
 630:	9c f4       	brge	.+38     	; 0x658 <TIMER_delay+0x52>
	{
		TimerInitial = (maxDelay-millisec)/tickTime;
 632:	a7 01       	movw	r20, r14
 634:	96 01       	movw	r18, r12
 636:	6f e6       	ldi	r22, 0x6F	; 111
 638:	72 e1       	ldi	r23, 0x12	; 18
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	91 e4       	ldi	r25, 0x41	; 65
 63e:	0e 94 6f 03 	call	0x6de	; 0x6de <__subsf3>
 642:	2f e6       	ldi	r18, 0x6F	; 111
 644:	32 e1       	ldi	r19, 0x12	; 18
 646:	43 e0       	ldi	r20, 0x03	; 3
 648:	5d e3       	ldi	r21, 0x3D	; 61
 64a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 64e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
		numberOfOverflows = 1;
 652:	c1 e0       	ldi	r28, 0x01	; 1
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	29 c0       	rjmp	.+82     	; 0x6aa <TIMER_delay+0xa4>
	}
	else if (millisec == (uint16_t) maxDelay)
 658:	28 97       	sbiw	r28, 0x08	; 8
 65a:	21 f1       	breq	.+72     	; 0x6a4 <TIMER_delay+0x9e>
		TimerInitial = 0;
		numberOfOverflows = 1;
	}
	else
	{
		numberOfOverflows = (uint16_t) (millisec/maxDelay);
 65c:	2f e6       	ldi	r18, 0x6F	; 111
 65e:	32 e1       	ldi	r19, 0x12	; 18
 660:	43 e0       	ldi	r20, 0x03	; 3
 662:	51 e4       	ldi	r21, 0x41	; 65
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 66c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 670:	eb 01       	movw	r28, r22
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
 672:	a7 01       	movw	r20, r14
 674:	96 01       	movw	r18, r12
 676:	6f e6       	ldi	r22, 0x6F	; 111
 678:	72 e1       	ldi	r23, 0x12	; 18
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	91 e4       	ldi	r25, 0x41	; 65
 67e:	0e 94 6f 03 	call	0x6de	; 0x6de <__subsf3>
 682:	2f e6       	ldi	r18, 0x6F	; 111
 684:	32 e1       	ldi	r19, 0x12	; 18
 686:	43 e0       	ldi	r20, 0x03	; 3
 688:	5d e3       	ldi	r21, 0x3D	; 61
 68a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__divsf3>
 68e:	9b 01       	movw	r18, r22
 690:	ac 01       	movw	r20, r24
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	80 e8       	ldi	r24, 0x80	; 128
 698:	93 e4       	ldi	r25, 0x43	; 67
 69a:	0e 94 6f 03 	call	0x6de	; 0x6de <__subsf3>
 69e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fixunssfsi>
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <TIMER_delay+0xa4>
		TimerInitial = (maxDelay-millisec)/tickTime;
		numberOfOverflows = 1;
	}
	else if (millisec == (uint16_t) maxDelay)
	{
		TimerInitial = 0;
 6a4:	60 e0       	ldi	r22, 0x00	; 0
		numberOfOverflows = 1;
 6a6:	c1 e0       	ldi	r28, 0x01	; 1
 6a8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		numberOfOverflows = (uint16_t) (millisec/maxDelay);
		TimerInitial = 256 - (maxDelay-millisec)/tickTime;
	}
	
	TCNT0 = TimerInitial;
 6aa:	62 bf       	out	0x32, r22	; 50
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
 6ac:	83 b7       	in	r24, 0x33	; 51
 6ae:	84 60       	ori	r24, 0x04	; 4
 6b0:	83 bf       	out	0x33, r24	; 51

void TIMER_delay(uint16_t millisec)
{
	uint16_t numberOfOverflows, TimerInitial, overflow_Counter ;
	double maxDelay;
	overflow_Counter = 0;
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	TCNT0 = TimerInitial;
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
	while (overflow_Counter != numberOfOverflows)
 6b6:	08 c0       	rjmp	.+16     	; 0x6c8 <TIMER_delay+0xc2>
	{
		while((TIFR & (1<<0)) == 0);
 6b8:	08 b6       	in	r0, 0x38	; 56
 6ba:	00 fe       	sbrs	r0, 0
 6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <TIMER_delay+0xb2>
		TIFR |= (1<<0); //reset overflow flag
 6be:	88 b7       	in	r24, 0x38	; 56
 6c0:	81 60       	ori	r24, 0x01	; 1
 6c2:	88 bf       	out	0x38, r24	; 56
		overflow_Counter = overflow_Counter + 1 ;
 6c4:	2f 5f       	subi	r18, 0xFF	; 255
 6c6:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	
	TCNT0 = TimerInitial;
	// Set prescaler to 256 and start timer
	TCCR0 |= (1 << 2);
	while (overflow_Counter != numberOfOverflows)
 6c8:	c2 17       	cp	r28, r18
 6ca:	d3 07       	cpc	r29, r19
 6cc:	a9 f7       	brne	.-22     	; 0x6b8 <TIMER_delay+0xb2>
		while((TIFR & (1<<0)) == 0);
		TIFR |= (1<<0); //reset overflow flag
		overflow_Counter = overflow_Counter + 1 ;
		
	}
	TCCR0 = 0; //stop timer
 6ce:	13 be       	out	0x33, r1	; 51
	return ;
}
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	ff 90       	pop	r15
 6d6:	ef 90       	pop	r14
 6d8:	df 90       	pop	r13
 6da:	cf 90       	pop	r12
 6dc:	08 95       	ret

000006de <__subsf3>:
 6de:	50 58       	subi	r21, 0x80	; 128

000006e0 <__addsf3>:
 6e0:	bb 27       	eor	r27, r27
 6e2:	aa 27       	eor	r26, r26
 6e4:	0e 94 87 03 	call	0x70e	; 0x70e <__addsf3x>
 6e8:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_round>
 6ec:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_pscA>
 6f0:	38 f0       	brcs	.+14     	; 0x700 <__addsf3+0x20>
 6f2:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fp_pscB>
 6f6:	20 f0       	brcs	.+8      	; 0x700 <__addsf3+0x20>
 6f8:	39 f4       	brne	.+14     	; 0x708 <__addsf3+0x28>
 6fa:	9f 3f       	cpi	r25, 0xFF	; 255
 6fc:	19 f4       	brne	.+6      	; 0x704 <__addsf3+0x24>
 6fe:	26 f4       	brtc	.+8      	; 0x708 <__addsf3+0x28>
 700:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_nan>
 704:	0e f4       	brtc	.+2      	; 0x708 <__addsf3+0x28>
 706:	e0 95       	com	r30
 708:	e7 fb       	bst	r30, 7
 70a:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_inf>

0000070e <__addsf3x>:
 70e:	e9 2f       	mov	r30, r25
 710:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_split3>
 714:	58 f3       	brcs	.-42     	; 0x6ec <__addsf3+0xc>
 716:	ba 17       	cp	r27, r26
 718:	62 07       	cpc	r22, r18
 71a:	73 07       	cpc	r23, r19
 71c:	84 07       	cpc	r24, r20
 71e:	95 07       	cpc	r25, r21
 720:	20 f0       	brcs	.+8      	; 0x72a <__addsf3x+0x1c>
 722:	79 f4       	brne	.+30     	; 0x742 <__addsf3x+0x34>
 724:	a6 f5       	brtc	.+104    	; 0x78e <__addsf3x+0x80>
 726:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__fp_zero>
 72a:	0e f4       	brtc	.+2      	; 0x72e <__addsf3x+0x20>
 72c:	e0 95       	com	r30
 72e:	0b 2e       	mov	r0, r27
 730:	ba 2f       	mov	r27, r26
 732:	a0 2d       	mov	r26, r0
 734:	0b 01       	movw	r0, r22
 736:	b9 01       	movw	r22, r18
 738:	90 01       	movw	r18, r0
 73a:	0c 01       	movw	r0, r24
 73c:	ca 01       	movw	r24, r20
 73e:	a0 01       	movw	r20, r0
 740:	11 24       	eor	r1, r1
 742:	ff 27       	eor	r31, r31
 744:	59 1b       	sub	r21, r25
 746:	99 f0       	breq	.+38     	; 0x76e <__addsf3x+0x60>
 748:	59 3f       	cpi	r21, 0xF9	; 249
 74a:	50 f4       	brcc	.+20     	; 0x760 <__addsf3x+0x52>
 74c:	50 3e       	cpi	r21, 0xE0	; 224
 74e:	68 f1       	brcs	.+90     	; 0x7aa <__addsf3x+0x9c>
 750:	1a 16       	cp	r1, r26
 752:	f0 40       	sbci	r31, 0x00	; 0
 754:	a2 2f       	mov	r26, r18
 756:	23 2f       	mov	r18, r19
 758:	34 2f       	mov	r19, r20
 75a:	44 27       	eor	r20, r20
 75c:	58 5f       	subi	r21, 0xF8	; 248
 75e:	f3 cf       	rjmp	.-26     	; 0x746 <__addsf3x+0x38>
 760:	46 95       	lsr	r20
 762:	37 95       	ror	r19
 764:	27 95       	ror	r18
 766:	a7 95       	ror	r26
 768:	f0 40       	sbci	r31, 0x00	; 0
 76a:	53 95       	inc	r21
 76c:	c9 f7       	brne	.-14     	; 0x760 <__addsf3x+0x52>
 76e:	7e f4       	brtc	.+30     	; 0x78e <__addsf3x+0x80>
 770:	1f 16       	cp	r1, r31
 772:	ba 0b       	sbc	r27, r26
 774:	62 0b       	sbc	r22, r18
 776:	73 0b       	sbc	r23, r19
 778:	84 0b       	sbc	r24, r20
 77a:	ba f0       	brmi	.+46     	; 0x7aa <__addsf3x+0x9c>
 77c:	91 50       	subi	r25, 0x01	; 1
 77e:	a1 f0       	breq	.+40     	; 0x7a8 <__addsf3x+0x9a>
 780:	ff 0f       	add	r31, r31
 782:	bb 1f       	adc	r27, r27
 784:	66 1f       	adc	r22, r22
 786:	77 1f       	adc	r23, r23
 788:	88 1f       	adc	r24, r24
 78a:	c2 f7       	brpl	.-16     	; 0x77c <__addsf3x+0x6e>
 78c:	0e c0       	rjmp	.+28     	; 0x7aa <__addsf3x+0x9c>
 78e:	ba 0f       	add	r27, r26
 790:	62 1f       	adc	r22, r18
 792:	73 1f       	adc	r23, r19
 794:	84 1f       	adc	r24, r20
 796:	48 f4       	brcc	.+18     	; 0x7aa <__addsf3x+0x9c>
 798:	87 95       	ror	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f7 95       	ror	r31
 7a2:	9e 3f       	cpi	r25, 0xFE	; 254
 7a4:	08 f0       	brcs	.+2      	; 0x7a8 <__addsf3x+0x9a>
 7a6:	b0 cf       	rjmp	.-160    	; 0x708 <__addsf3+0x28>
 7a8:	93 95       	inc	r25
 7aa:	88 0f       	add	r24, r24
 7ac:	08 f0       	brcs	.+2      	; 0x7b0 <__addsf3x+0xa2>
 7ae:	99 27       	eor	r25, r25
 7b0:	ee 0f       	add	r30, r30
 7b2:	97 95       	ror	r25
 7b4:	87 95       	ror	r24
 7b6:	08 95       	ret

000007b8 <__cmpsf2>:
 7b8:	0e 94 bf 04 	call	0x97e	; 0x97e <__fp_cmp>
 7bc:	08 f4       	brcc	.+2      	; 0x7c0 <__cmpsf2+0x8>
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	08 95       	ret

000007c2 <__divsf3>:
 7c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__divsf3x>
 7c6:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__fp_round>
 7ca:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__fp_pscB>
 7ce:	58 f0       	brcs	.+22     	; 0x7e6 <__divsf3+0x24>
 7d0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <__fp_pscA>
 7d4:	40 f0       	brcs	.+16     	; 0x7e6 <__divsf3+0x24>
 7d6:	29 f4       	brne	.+10     	; 0x7e2 <__divsf3+0x20>
 7d8:	5f 3f       	cpi	r21, 0xFF	; 255
 7da:	29 f0       	breq	.+10     	; 0x7e6 <__divsf3+0x24>
 7dc:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_inf>
 7e0:	51 11       	cpse	r21, r1
 7e2:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_szero>
 7e6:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__fp_nan>

000007ea <__divsf3x>:
 7ea:	0e 94 0b 05 	call	0xa16	; 0xa16 <__fp_split3>
 7ee:	68 f3       	brcs	.-38     	; 0x7ca <__divsf3+0x8>

000007f0 <__divsf3_pse>:
 7f0:	99 23       	and	r25, r25
 7f2:	b1 f3       	breq	.-20     	; 0x7e0 <__divsf3+0x1e>
 7f4:	55 23       	and	r21, r21
 7f6:	91 f3       	breq	.-28     	; 0x7dc <__divsf3+0x1a>
 7f8:	95 1b       	sub	r25, r21
 7fa:	55 0b       	sbc	r21, r21
 7fc:	bb 27       	eor	r27, r27
 7fe:	aa 27       	eor	r26, r26
 800:	62 17       	cp	r22, r18
 802:	73 07       	cpc	r23, r19
 804:	84 07       	cpc	r24, r20
 806:	38 f0       	brcs	.+14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 808:	9f 5f       	subi	r25, 0xFF	; 255
 80a:	5f 4f       	sbci	r21, 0xFF	; 255
 80c:	22 0f       	add	r18, r18
 80e:	33 1f       	adc	r19, r19
 810:	44 1f       	adc	r20, r20
 812:	aa 1f       	adc	r26, r26
 814:	a9 f3       	breq	.-22     	; 0x800 <__DATA_REGION_LENGTH__>
 816:	35 d0       	rcall	.+106    	; 0x882 <__stack+0x23>
 818:	0e 2e       	mov	r0, r30
 81a:	3a f0       	brmi	.+14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 81c:	e0 e8       	ldi	r30, 0x80	; 128
 81e:	32 d0       	rcall	.+100    	; 0x884 <__stack+0x25>
 820:	91 50       	subi	r25, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	e6 95       	lsr	r30
 826:	00 1c       	adc	r0, r0
 828:	ca f7       	brpl	.-14     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 82a:	2b d0       	rcall	.+86     	; 0x882 <__stack+0x23>
 82c:	fe 2f       	mov	r31, r30
 82e:	29 d0       	rcall	.+82     	; 0x882 <__stack+0x23>
 830:	66 0f       	add	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	bb 1f       	adc	r27, r27
 838:	26 17       	cp	r18, r22
 83a:	37 07       	cpc	r19, r23
 83c:	48 07       	cpc	r20, r24
 83e:	ab 07       	cpc	r26, r27
 840:	b0 e8       	ldi	r27, 0x80	; 128
 842:	09 f0       	breq	.+2      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 844:	bb 0b       	sbc	r27, r27
 846:	80 2d       	mov	r24, r0
 848:	bf 01       	movw	r22, r30
 84a:	ff 27       	eor	r31, r31
 84c:	93 58       	subi	r25, 0x83	; 131
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	3a f0       	brmi	.+14     	; 0x860 <__stack+0x1>
 852:	9e 3f       	cpi	r25, 0xFE	; 254
 854:	51 05       	cpc	r21, r1
 856:	78 f0       	brcs	.+30     	; 0x876 <__stack+0x17>
 858:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__fp_inf>
 85c:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <__fp_szero>
 860:	5f 3f       	cpi	r21, 0xFF	; 255
 862:	e4 f3       	brlt	.-8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 864:	98 3e       	cpi	r25, 0xE8	; 232
 866:	d4 f3       	brlt	.-12     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 868:	86 95       	lsr	r24
 86a:	77 95       	ror	r23
 86c:	67 95       	ror	r22
 86e:	b7 95       	ror	r27
 870:	f7 95       	ror	r31
 872:	9f 5f       	subi	r25, 0xFF	; 255
 874:	c9 f7       	brne	.-14     	; 0x868 <__stack+0x9>
 876:	88 0f       	add	r24, r24
 878:	91 1d       	adc	r25, r1
 87a:	96 95       	lsr	r25
 87c:	87 95       	ror	r24
 87e:	97 f9       	bld	r25, 7
 880:	08 95       	ret
 882:	e1 e0       	ldi	r30, 0x01	; 1
 884:	66 0f       	add	r22, r22
 886:	77 1f       	adc	r23, r23
 888:	88 1f       	adc	r24, r24
 88a:	bb 1f       	adc	r27, r27
 88c:	62 17       	cp	r22, r18
 88e:	73 07       	cpc	r23, r19
 890:	84 07       	cpc	r24, r20
 892:	ba 07       	cpc	r27, r26
 894:	20 f0       	brcs	.+8      	; 0x89e <__stack+0x3f>
 896:	62 1b       	sub	r22, r18
 898:	73 0b       	sbc	r23, r19
 89a:	84 0b       	sbc	r24, r20
 89c:	ba 0b       	sbc	r27, r26
 89e:	ee 1f       	adc	r30, r30
 8a0:	88 f7       	brcc	.-30     	; 0x884 <__stack+0x25>
 8a2:	e0 95       	com	r30
 8a4:	08 95       	ret

000008a6 <__fixunssfsi>:
 8a6:	0e 94 13 05 	call	0xa26	; 0xa26 <__fp_splitA>
 8aa:	88 f0       	brcs	.+34     	; 0x8ce <__fixunssfsi+0x28>
 8ac:	9f 57       	subi	r25, 0x7F	; 127
 8ae:	98 f0       	brcs	.+38     	; 0x8d6 <__fixunssfsi+0x30>
 8b0:	b9 2f       	mov	r27, r25
 8b2:	99 27       	eor	r25, r25
 8b4:	b7 51       	subi	r27, 0x17	; 23
 8b6:	b0 f0       	brcs	.+44     	; 0x8e4 <__fixunssfsi+0x3e>
 8b8:	e1 f0       	breq	.+56     	; 0x8f2 <__fixunssfsi+0x4c>
 8ba:	66 0f       	add	r22, r22
 8bc:	77 1f       	adc	r23, r23
 8be:	88 1f       	adc	r24, r24
 8c0:	99 1f       	adc	r25, r25
 8c2:	1a f0       	brmi	.+6      	; 0x8ca <__fixunssfsi+0x24>
 8c4:	ba 95       	dec	r27
 8c6:	c9 f7       	brne	.-14     	; 0x8ba <__fixunssfsi+0x14>
 8c8:	14 c0       	rjmp	.+40     	; 0x8f2 <__fixunssfsi+0x4c>
 8ca:	b1 30       	cpi	r27, 0x01	; 1
 8cc:	91 f0       	breq	.+36     	; 0x8f2 <__fixunssfsi+0x4c>
 8ce:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_zero>
 8d2:	b1 e0       	ldi	r27, 0x01	; 1
 8d4:	08 95       	ret
 8d6:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <__fp_zero>
 8da:	67 2f       	mov	r22, r23
 8dc:	78 2f       	mov	r23, r24
 8de:	88 27       	eor	r24, r24
 8e0:	b8 5f       	subi	r27, 0xF8	; 248
 8e2:	39 f0       	breq	.+14     	; 0x8f2 <__fixunssfsi+0x4c>
 8e4:	b9 3f       	cpi	r27, 0xF9	; 249
 8e6:	cc f3       	brlt	.-14     	; 0x8da <__fixunssfsi+0x34>
 8e8:	86 95       	lsr	r24
 8ea:	77 95       	ror	r23
 8ec:	67 95       	ror	r22
 8ee:	b3 95       	inc	r27
 8f0:	d9 f7       	brne	.-10     	; 0x8e8 <__fixunssfsi+0x42>
 8f2:	3e f4       	brtc	.+14     	; 0x902 <__fixunssfsi+0x5c>
 8f4:	90 95       	com	r25
 8f6:	80 95       	com	r24
 8f8:	70 95       	com	r23
 8fa:	61 95       	neg	r22
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255
 8fe:	8f 4f       	sbci	r24, 0xFF	; 255
 900:	9f 4f       	sbci	r25, 0xFF	; 255
 902:	08 95       	ret

00000904 <__floatunsisf>:
 904:	e8 94       	clt
 906:	09 c0       	rjmp	.+18     	; 0x91a <__floatsisf+0x12>

00000908 <__floatsisf>:
 908:	97 fb       	bst	r25, 7
 90a:	3e f4       	brtc	.+14     	; 0x91a <__floatsisf+0x12>
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	99 23       	and	r25, r25
 91c:	a9 f0       	breq	.+42     	; 0x948 <__floatsisf+0x40>
 91e:	f9 2f       	mov	r31, r25
 920:	96 e9       	ldi	r25, 0x96	; 150
 922:	bb 27       	eor	r27, r27
 924:	93 95       	inc	r25
 926:	f6 95       	lsr	r31
 928:	87 95       	ror	r24
 92a:	77 95       	ror	r23
 92c:	67 95       	ror	r22
 92e:	b7 95       	ror	r27
 930:	f1 11       	cpse	r31, r1
 932:	f8 cf       	rjmp	.-16     	; 0x924 <__floatsisf+0x1c>
 934:	fa f4       	brpl	.+62     	; 0x974 <__floatsisf+0x6c>
 936:	bb 0f       	add	r27, r27
 938:	11 f4       	brne	.+4      	; 0x93e <__floatsisf+0x36>
 93a:	60 ff       	sbrs	r22, 0
 93c:	1b c0       	rjmp	.+54     	; 0x974 <__floatsisf+0x6c>
 93e:	6f 5f       	subi	r22, 0xFF	; 255
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	16 c0       	rjmp	.+44     	; 0x974 <__floatsisf+0x6c>
 948:	88 23       	and	r24, r24
 94a:	11 f0       	breq	.+4      	; 0x950 <__floatsisf+0x48>
 94c:	96 e9       	ldi	r25, 0x96	; 150
 94e:	11 c0       	rjmp	.+34     	; 0x972 <__floatsisf+0x6a>
 950:	77 23       	and	r23, r23
 952:	21 f0       	breq	.+8      	; 0x95c <__floatsisf+0x54>
 954:	9e e8       	ldi	r25, 0x8E	; 142
 956:	87 2f       	mov	r24, r23
 958:	76 2f       	mov	r23, r22
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__floatsisf+0x5e>
 95c:	66 23       	and	r22, r22
 95e:	71 f0       	breq	.+28     	; 0x97c <__floatsisf+0x74>
 960:	96 e8       	ldi	r25, 0x86	; 134
 962:	86 2f       	mov	r24, r22
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	60 e0       	ldi	r22, 0x00	; 0
 968:	2a f0       	brmi	.+10     	; 0x974 <__floatsisf+0x6c>
 96a:	9a 95       	dec	r25
 96c:	66 0f       	add	r22, r22
 96e:	77 1f       	adc	r23, r23
 970:	88 1f       	adc	r24, r24
 972:	da f7       	brpl	.-10     	; 0x96a <__floatsisf+0x62>
 974:	88 0f       	add	r24, r24
 976:	96 95       	lsr	r25
 978:	87 95       	ror	r24
 97a:	97 f9       	bld	r25, 7
 97c:	08 95       	ret

0000097e <__fp_cmp>:
 97e:	99 0f       	add	r25, r25
 980:	00 08       	sbc	r0, r0
 982:	55 0f       	add	r21, r21
 984:	aa 0b       	sbc	r26, r26
 986:	e0 e8       	ldi	r30, 0x80	; 128
 988:	fe ef       	ldi	r31, 0xFE	; 254
 98a:	16 16       	cp	r1, r22
 98c:	17 06       	cpc	r1, r23
 98e:	e8 07       	cpc	r30, r24
 990:	f9 07       	cpc	r31, r25
 992:	c0 f0       	brcs	.+48     	; 0x9c4 <__fp_cmp+0x46>
 994:	12 16       	cp	r1, r18
 996:	13 06       	cpc	r1, r19
 998:	e4 07       	cpc	r30, r20
 99a:	f5 07       	cpc	r31, r21
 99c:	98 f0       	brcs	.+38     	; 0x9c4 <__fp_cmp+0x46>
 99e:	62 1b       	sub	r22, r18
 9a0:	73 0b       	sbc	r23, r19
 9a2:	84 0b       	sbc	r24, r20
 9a4:	95 0b       	sbc	r25, r21
 9a6:	39 f4       	brne	.+14     	; 0x9b6 <__fp_cmp+0x38>
 9a8:	0a 26       	eor	r0, r26
 9aa:	61 f0       	breq	.+24     	; 0x9c4 <__fp_cmp+0x46>
 9ac:	23 2b       	or	r18, r19
 9ae:	24 2b       	or	r18, r20
 9b0:	25 2b       	or	r18, r21
 9b2:	21 f4       	brne	.+8      	; 0x9bc <__fp_cmp+0x3e>
 9b4:	08 95       	ret
 9b6:	0a 26       	eor	r0, r26
 9b8:	09 f4       	brne	.+2      	; 0x9bc <__fp_cmp+0x3e>
 9ba:	a1 40       	sbci	r26, 0x01	; 1
 9bc:	a6 95       	lsr	r26
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	81 1d       	adc	r24, r1
 9c2:	81 1d       	adc	r24, r1
 9c4:	08 95       	ret

000009c6 <__fp_inf>:
 9c6:	97 f9       	bld	r25, 7
 9c8:	9f 67       	ori	r25, 0x7F	; 127
 9ca:	80 e8       	ldi	r24, 0x80	; 128
 9cc:	70 e0       	ldi	r23, 0x00	; 0
 9ce:	60 e0       	ldi	r22, 0x00	; 0
 9d0:	08 95       	ret

000009d2 <__fp_nan>:
 9d2:	9f ef       	ldi	r25, 0xFF	; 255
 9d4:	80 ec       	ldi	r24, 0xC0	; 192
 9d6:	08 95       	ret

000009d8 <__fp_pscA>:
 9d8:	00 24       	eor	r0, r0
 9da:	0a 94       	dec	r0
 9dc:	16 16       	cp	r1, r22
 9de:	17 06       	cpc	r1, r23
 9e0:	18 06       	cpc	r1, r24
 9e2:	09 06       	cpc	r0, r25
 9e4:	08 95       	ret

000009e6 <__fp_pscB>:
 9e6:	00 24       	eor	r0, r0
 9e8:	0a 94       	dec	r0
 9ea:	12 16       	cp	r1, r18
 9ec:	13 06       	cpc	r1, r19
 9ee:	14 06       	cpc	r1, r20
 9f0:	05 06       	cpc	r0, r21
 9f2:	08 95       	ret

000009f4 <__fp_round>:
 9f4:	09 2e       	mov	r0, r25
 9f6:	03 94       	inc	r0
 9f8:	00 0c       	add	r0, r0
 9fa:	11 f4       	brne	.+4      	; 0xa00 <__fp_round+0xc>
 9fc:	88 23       	and	r24, r24
 9fe:	52 f0       	brmi	.+20     	; 0xa14 <__fp_round+0x20>
 a00:	bb 0f       	add	r27, r27
 a02:	40 f4       	brcc	.+16     	; 0xa14 <__fp_round+0x20>
 a04:	bf 2b       	or	r27, r31
 a06:	11 f4       	brne	.+4      	; 0xa0c <__fp_round+0x18>
 a08:	60 ff       	sbrs	r22, 0
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <__fp_round+0x20>
 a0c:	6f 5f       	subi	r22, 0xFF	; 255
 a0e:	7f 4f       	sbci	r23, 0xFF	; 255
 a10:	8f 4f       	sbci	r24, 0xFF	; 255
 a12:	9f 4f       	sbci	r25, 0xFF	; 255
 a14:	08 95       	ret

00000a16 <__fp_split3>:
 a16:	57 fd       	sbrc	r21, 7
 a18:	90 58       	subi	r25, 0x80	; 128
 a1a:	44 0f       	add	r20, r20
 a1c:	55 1f       	adc	r21, r21
 a1e:	59 f0       	breq	.+22     	; 0xa36 <__fp_splitA+0x10>
 a20:	5f 3f       	cpi	r21, 0xFF	; 255
 a22:	71 f0       	breq	.+28     	; 0xa40 <__fp_splitA+0x1a>
 a24:	47 95       	ror	r20

00000a26 <__fp_splitA>:
 a26:	88 0f       	add	r24, r24
 a28:	97 fb       	bst	r25, 7
 a2a:	99 1f       	adc	r25, r25
 a2c:	61 f0       	breq	.+24     	; 0xa46 <__fp_splitA+0x20>
 a2e:	9f 3f       	cpi	r25, 0xFF	; 255
 a30:	79 f0       	breq	.+30     	; 0xa50 <__fp_splitA+0x2a>
 a32:	87 95       	ror	r24
 a34:	08 95       	ret
 a36:	12 16       	cp	r1, r18
 a38:	13 06       	cpc	r1, r19
 a3a:	14 06       	cpc	r1, r20
 a3c:	55 1f       	adc	r21, r21
 a3e:	f2 cf       	rjmp	.-28     	; 0xa24 <__fp_split3+0xe>
 a40:	46 95       	lsr	r20
 a42:	f1 df       	rcall	.-30     	; 0xa26 <__fp_splitA>
 a44:	08 c0       	rjmp	.+16     	; 0xa56 <__fp_splitA+0x30>
 a46:	16 16       	cp	r1, r22
 a48:	17 06       	cpc	r1, r23
 a4a:	18 06       	cpc	r1, r24
 a4c:	99 1f       	adc	r25, r25
 a4e:	f1 cf       	rjmp	.-30     	; 0xa32 <__fp_splitA+0xc>
 a50:	86 95       	lsr	r24
 a52:	71 05       	cpc	r23, r1
 a54:	61 05       	cpc	r22, r1
 a56:	08 94       	sec
 a58:	08 95       	ret

00000a5a <__fp_zero>:
 a5a:	e8 94       	clt

00000a5c <__fp_szero>:
 a5c:	bb 27       	eor	r27, r27
 a5e:	66 27       	eor	r22, r22
 a60:	77 27       	eor	r23, r23
 a62:	cb 01       	movw	r24, r22
 a64:	97 f9       	bld	r25, 7
 a66:	08 95       	ret

00000a68 <_exit>:
 a68:	f8 94       	cli

00000a6a <__stop_program>:
 a6a:	ff cf       	rjmp	.-2      	; 0xa6a <__stop_program>
